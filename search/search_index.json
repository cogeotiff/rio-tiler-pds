{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Rio-Tiler-PDS: A rio-tiler plugin for Public Datasets","text":"<p> A rio-tiler plugin to read from publicly-available datasets. </p> <p> </p> <p>Important This is the new module for rio-tiler missions specific (ref: cogeotiff/rio-tiler#195)</p> <p>Documentation: cogeotiff.github.io/rio-tiler-pds/</p> <p>Source Code: cogeotiff/rio-tiler-pds</p>"},{"location":"#installation","title":"Installation","text":"<p>You can install rio-tiler-pds using pip</p> <pre><code>$ pip install -U pip\n$ pip install rio-tiler-pds\n</code></pre> <p>or install from source:</p> <pre><code>$ pip install -U pip\n$ pip install git+https://github.com/cogeotiff/rio-tiler-pds.git\n</code></pre>"},{"location":"#datasets","title":"Datasets","text":"Data Level/Product Format Owner Region Bucket Type Sentinel 2 L1C JPEG2000 Sinergise / AWS eu-central-1 Requester-pays Sentinel 2 L2A JPEG2000 Sinergise / AWS eu-central-1 Requester-pays Sentinel 2 L2A COG Digital Earth Africa / AWS us-west-2 Public Sentinel 1 L1C GRD (IW, EW, S1-6) COG (Internal GCPS) Sinergise / AWS eu-central-1 Requester-pays Landsat Collection 2 L1,L2 COG USGS / AWS us-west-2 Requester-pays CBERS 4/4A L2/L4 COG AMS Kepler / AWS us-east-1 Requester-pays MODIS (modis-pds) MCD43A4, MOD09GQ, MYD09GQ, MOD09GA, MYD09GA GTiff (External Overviews) - us-west-2 Public MODIS (astraea-opendata) MCD43A4, MOD11A1, MOD13A1, MYD11A1 MYD13A1 COG Astraea / AWS us-west-2 Requester-pays Copernicus Digital Elevation Model GLO-30, GLO-90 COG Sinergise / AWS eu-central-1 Public <p>Adding more dataset:</p> <p>If you know of another publicly-available dataset that can easily be described with a \"scene id\", please feel free to open an issue.</p>"},{"location":"#warnings","title":"Warnings","text":""},{"location":"#requester-pays-buckets","title":"Requester-pays Buckets","text":"<p>On AWS, <code>sentinel2</code>, <code>sentinel1</code>, <code>cbers</code> and <code>modis</code> (in astraea-opendata) datasets are stored in requester pays buckets. This means that the cost of GET and LIST requests and egress fees for downloading files outside the AWS region will be charged to the accessing users, not the organization hosting the bucket. For <code>rio-tiler</code> and <code>rio-tiler-pds</code> to work with such buckets, you'll need to set <code>AWS_REQUEST_PAYER=\"requester\"</code> in your shell environment.</p>"},{"location":"#partial-reading-on-cloud-hosted-dataset","title":"Partial reading on Cloud hosted dataset","text":"<p>When reading data, <code>rio-tiler-pds</code> performs partial reads when possible. Hence performance will be best on data stored as Cloud Optimized GeoTIFF (COG). It's important to note that Sentinel-2 scenes hosted on AWS are not in Cloud Optimized format but in JPEG2000. Partial reads from JPEG2000 files are inefficient, and GDAL (the library underlying <code>rio-tiler-pds</code> and <code>rasterio</code>) will need to make many GET requests and transfer a lot of data. This will be both slow and expensive, since AWS's JPEG2000 collection of Sentinel 2 data is stored in a requester pays bucket.</p> <p>Ref: Do you really want people using your data blog post.</p>"},{"location":"#overview","title":"Overview","text":""},{"location":"#readers","title":"Readers","text":"<p>Each dataset has its own submodule (e.g sentinel2: <code>rio_tiler_pds.sentinel.aws</code>)</p> <pre><code>from rio_tiler_pds.landsat.aws import LandsatC2Reader\nfrom rio_tiler_pds.sentinel.aws import S1L1CReader\nfrom rio_tiler_pds.sentinel.aws import (\n    S2JP2Reader,  # JPEG2000\n    S2COGReader,   # COG\n)\n\nfrom rio_tiler_pds.cbers.aws import CBERSReader\nfrom rio_tiler_pds.modis.aws import MODISPDSReader, MODISASTRAEAReader\nfrom rio_tiler_pds.copernicus.aws import Dem30Reader, Dem90Reader\n</code></pre> <p>All Readers are subclass of <code>rio_tiler.io.BaseReader</code> and inherit its properties/methods.</p>"},{"location":"#properties","title":"Properties","text":"<ul> <li>bounds: Scene bounding box</li> <li>crs: CRS of the bounding box</li> <li>geographic_bounds: bounding box in geographic projection (e.g WGS84)</li> <li>minzoom: WebMercator MinZoom (e.g 7 for Landsat 8)</li> <li>maxzoom: WebMercator MaxZoom (e.g 12 for Landsat 8)</li> </ul>"},{"location":"#methods","title":"Methods","text":"<ul> <li>info: Returns band's simple info (e.g nodata, band_descriptions, ....)</li> <li>statistics: Returns band's statistics (percentile, histogram, ...)</li> <li>tile: Read web mercator map tile from bands</li> <li>part: Extract part of bands</li> <li>preview: Returns a low resolution preview from bands</li> <li>point: Returns band's pixel value for a given lon,lat</li> <li>feature: Extract part of bands</li> </ul>"},{"location":"#other","title":"Other","text":"<ul> <li>bands (property): List of available bands for each dataset</li> </ul>"},{"location":"#scene-id","title":"Scene ID","text":"<p>All readers take scene id as main input. The scene id is used internaly by the reader to derive the full path of the data.</p> <p>e.g: Landsat on AWS</p> <p>Because the Landsat AWS PDS follows a regular schema to store the data (<code>s3://{bucket}/c1/L8/{path}/{row}/{scene}/{scene}_{band}.TIF\"</code>), we can easily reconstruct the full band's path by parsing the scene id.</p> <pre><code>from rio_tiler_pds.landsat.aws import LandsatC2Reader\nfrom rio_tiler_pds.landsat.utils import sceneid_parser\n\nsceneid_parser(\"LC08_L2SP_001062_20201031_20201106_02_T2\")\n\n&gt; {'sensor': 'C',\n 'satellite': '08',\n 'processingCorrectionLevel': 'L2SP',\n 'path': '001',\n 'row': '062',\n 'acquisitionYear': '2020',\n 'acquisitionMonth': '10',\n 'acquisitionDay': '31',\n 'processingYear': '2020',\n 'processingMonth': '11',\n 'processingDay': '06',\n 'collectionNumber': '02',\n 'collectionCategory': 'T2',\n 'scene': 'LC08_L2SP_001062_20201031_20201106_02_T2',\n 'date': '2020-10-31',\n '_processingLevelNum': '2',\n 'category': 'standard',\n 'sensor_name': 'oli-tirs',\n '_sensor_s3_prefix': 'oli-tirs',\n 'bands': ('QA_PIXEL',\n  'QA_RADSAT',\n  'SR_B1',\n  'SR_B2',\n  'SR_B3',\n  'SR_B4',\n  'SR_B5',\n  'SR_B6',\n  'SR_B7',\n  'SR_QA_AEROSOL',\n  'ST_ATRAN',\n  'ST_B10',\n  'ST_CDIST',\n  'ST_DRAD',\n  'ST_EMIS',\n  'ST_EMSD',\n  'ST_QA',\n  'ST_TRAD',\n  'ST_URAD')}\n\nwith LandsatC2Reader(\"LC08_L2SP_001062_20201031_20201106_02_T2\") as landsat:\n    print(landsat._get_band_url(\"SR_B2\"))\n\n&gt; s3://usgs-landsat/collection02/level-2/standard/oli-tirs/2020/001/062/LC08_L2SP_001062_20201031_20201106_02_T2/LC08_L2SP_001062_20201031_20201106_02_T2_SR_B2.TIF\n</code></pre> <p>Each dataset has a specific scene id format:</p> <p>Scene ID formats</p> <ul> <li> <p>Landsat</p> <ul> <li>link: rio_tiler_pds.landsat.utils.sceneid_parser</li> <li>regex: <code>^L[COTEM]0[0-9]_L\\d{1}[A-Z]{2}_\\d{6}_\\d{8}_\\d{8}_\\d{2}_(T1|T2|RT)$</code></li> <li>example: <code>LC08_L1TP_016037_20170813_20170814_01_RT</code></li> </ul> </li> <li> <p>Sentinel 1 L1C</p> <ul> <li>link: rio_tiler_pds.sentinel.utils.s1_sceneid_parser</li> <li>regex: <code>^S1[AB]_(IW|EW)_[A-Z]{3}[FHM]_[0-9][SA][A-Z]{2}_[0-9]{8}T[0-9]{6}_[0-9]{8}T[0-9]{6}_[0-9A-Z]{6}_[0-9A-Z]{6}_[0-9A-Z]{4}$</code></li> <li>example: <code>S1A_IW_GRDH_1SDV_20180716T004042_20180716T004107_022812_02792A_FD5B</code></li> </ul> </li> <li> <p>Sentinel 2 JPEG2000 and Sentinel 2 COG</p> <ul> <li>link: rio_tiler_pds.sentinel.utils.s2_sceneid_parser</li> <li>regex: <code>^S2[AB]_[0-9]{2}[A-Z]{3}_[0-9]{8}_[0-9]_L[0-2][A-C]$</code> or <code>^S2[AB]_L[0-2][A-C]_[0-9]{8}_[0-9]{2}[A-Z]{3}_[0-9]$</code></li> <li>example: <code>S2A_29RKH_20200219_0_L2A</code>, <code>S2A_L1C_20170729_19UDP_0</code>, <code>S2A_L2A_20170729_19UDP_0</code></li> </ul> </li> <li> <p>CBERS</p> <ul> <li>link: rio_tiler_pds.cbers.utils.sceneid_parser</li> <li>regex: <code>^CBERS_(4|4A)_\\w+_[0-9]{8}_[0-9]{3}_[0-9]{3}_L\\w+$</code></li> <li>example: <code>CBERS_4_MUX_20171121_057_094_L2</code>, <code>CBERS_4_AWFI_20170420_146_129_L2</code>, <code>CBERS_4_PAN10M_20170427_161_109_L4</code>, <code>CBERS_4_PAN5M_20170425_153_114_L4</code>, <code>CBERS_4A_WPM_20200730_209_139_L4</code></li> </ul> </li> <li> <p>MODIS (PDS and Astraea)</p> <ul> <li>link: rio_tiler_pds.modis.utils.sceneid_parser</li> <li>regex: <code>^M[COY]D[0-9]{2}[A-Z0-9]{2}\\.A[0-9]{4}[0-9]{3}\\.h[0-9]{2}v[0-9]{2}\\.[0-9]{3}\\.[0-9]{13}$</code></li> <li>example: <code>MCD43A4.A2017006.h21v11.006.2017018074804</code></li> </ul> </li> </ul>"},{"location":"#band-per-assetfile","title":"Band Per Asset/File","text":"<p><code>rio-tiler-pds</code> Readers assume that bands (e.g eo:band in STAC) are stored in separate files.</p> <pre><code>$ aws s3 ls s3://usgs-landsat/collection02/level-2/standard/oli-tirs/2020/001/062/LC08_L2SP_001062_20201031_20201106_02_T2/ --request-payer\nLC08_L2SP_001062_20201031_20201106_02_T2_ANG.txt\nLC08_L2SP_001062_20201031_20201106_02_T2_MTL.json\nLC08_L2SP_001062_20201031_20201106_02_T2_MTL.txt\nLC08_L2SP_001062_20201031_20201106_02_T2_MTL.xml\nLC08_L2SP_001062_20201031_20201106_02_T2_QA_PIXEL.TIF\nLC08_L2SP_001062_20201031_20201106_02_T2_QA_RADSAT.TIF\nLC08_L2SP_001062_20201031_20201106_02_T2_SR_B1.TIF\nLC08_L2SP_001062_20201031_20201106_02_T2_SR_B2.TIF\nLC08_L2SP_001062_20201031_20201106_02_T2_SR_B3.TIF\nLC08_L2SP_001062_20201031_20201106_02_T2_SR_B4.TIF\nLC08_L2SP_001062_20201031_20201106_02_T2_SR_B5.TIF\nLC08_L2SP_001062_20201031_20201106_02_T2_SR_B6.TIF\nLC08_L2SP_001062_20201031_20201106_02_T2_SR_B7.TIF\nLC08_L2SP_001062_20201031_20201106_02_T2_SR_QA_AEROSOL.TIF\nLC08_L2SP_001062_20201031_20201106_02_T2_SR_stac.json\nLC08_L2SP_001062_20201031_20201106_02_T2_ST_ATRAN.TIF\nLC08_L2SP_001062_20201031_20201106_02_T2_ST_B10.TIF\nLC08_L2SP_001062_20201031_20201106_02_T2_ST_CDIST.TIF\nLC08_L2SP_001062_20201031_20201106_02_T2_ST_DRAD.TIF\nLC08_L2SP_001062_20201031_20201106_02_T2_ST_EMIS.TIF\nLC08_L2SP_001062_20201031_20201106_02_T2_ST_EMSD.TIF\nLC08_L2SP_001062_20201031_20201106_02_T2_ST_QA.TIF\nLC08_L2SP_001062_20201031_20201106_02_T2_ST_TRAD.TIF\nLC08_L2SP_001062_20201031_20201106_02_T2_ST_URAD.TIF\nLC08_L2SP_001062_20201031_20201106_02_T2_ST_stac.json\nLC08_L2SP_001062_20201031_20201106_02_T2_thumb_large.jpeg\nLC08_L2SP_001062_20201031_20201106_02_T2_thumb_small.jpeg\n</code></pre> <p>When reading data or metadata, readers will merge them.</p> <p>e.g <pre><code>with S2COGReader(\"S2A_L2A_20170729_19UDP_0\") as sentinel:\n    img = sentinel.tile(78, 89, 8, bands=(\"B01\", \"B02\"))\n    assert img.data.shape == (2, 256, 256)\n\n    stats = sentinel.statistics(bands=(\"B01\", \"B02\"))\n    print(stats)\n    &gt;&gt; {\n      'B01': BandStatistics(\n        min=2.0,\n        max=17132.0,\n        mean=2183.7570706659685,\n        count=651247.0,\n        sum=1422165241.0,\n        std=3474.123975478363,\n        median=370.0,\n        majority=238.0,\n        minority=2.0,\n        unique=15112.0,\n        histogram=[\n          [476342.0, 35760.0, 27525.0, 24852.0, 24379.0, 23792.0, 20891.0, 13602.0, 3891.0, 213.0],\n          [2.0, 1715.0, 3428.0, 5141.0, 6854.0, 8567.0, 10280.0, 11993.0, 13706.0, 15419.0, 17132.0]\n        ],\n        valid_percent=62.11,\n        masked_pixels=397329.0,\n        valid_pixels=651247.0,\n        percentile_2=179.0,\n        percentile_98=12465.0\n      ),\n      'B02': BandStatistics(\n        min=1.0,\n        max=15749.0,\n        mean=1941.2052554560712,\n        count=651247.0,\n        sum=1264204099.0,\n        std=3130.545395156859,\n        median=329.0,\n        majority=206.0,\n        minority=11946.0,\n        unique=13904.0,\n        histogram=[\n          [479174.0, 34919.0, 27649.0, 25126.0, 24913.0, 24119.0, 20223.0, 12097.0, 2872.0, 155.0],\n          [1.0, 1575.8, 3150.6, 4725.4, 6300.2, 7875.0, 9449.8, 11024.6, 12599.4, 14174.199999999999, 15749.0]\n        ],\n        valid_percent=62.11,\n        masked_pixels=397329.0,\n        valid_pixels=651247.0,\n        percentile_2=134.0,\n        percentile_98=11227.079999999958\n      )}\n\n      print(stats[\"B01\"].min)\n      &gt;&gt; 2.0\n</code></pre></p>"},{"location":"#mosaic-reader-copernicus-dem","title":"Mosaic Reader: Copernicus DEM","text":"<p>The Copernicus DEM GLO-30 and GLO-90 readers are not per scene but mosaic readers. This is possible because the dataset is a global dataset with file names having the <code>geo-location</code> of the COG, meaning we can easily contruct a filepath from a coordinate.</p> <pre><code>from rio_tiler_pds.copernicus.aws import Dem30Reader\n\nwith Dem30Reader() as dem:\n    print(dem.assets_for_point(-57.2, -11.2))\n\n&gt;&gt; ['s3://copernicus-dem-30m/Copernicus_DSM_COG_10_S12_00_W058_00_DEM/Copernicus_DSM_COG_10_S12_00_W058_00_DEM.tif']\n</code></pre>"},{"location":"#changes","title":"Changes","text":"<p>See CHANGES.md.</p>"},{"location":"#contribution-development","title":"Contribution &amp; Development","text":"<p>See CONTRIBUTING.md</p>"},{"location":"#license","title":"License","text":"<p>See LICENSE.txt</p>"},{"location":"#authors","title":"Authors","text":"<p>The rio-tiler project was begun at Mapbox and has been transferred in January 2019.</p> <p>See AUTHORS.txt for a listing of individual contributors.</p>"},{"location":"contributing/","title":"Development - Contributing","text":"<p>Issues and pull requests are more than welcome: github.com/cogeotiff/rio-tiler-pds/issues</p> <p>dev install</p> <pre><code>$ git clone https://github.com/cogeotiff/rio-tiler-pds.git\n$ cd rio-tiler-pds\n$ pip install -e .[\"test,dev\"]\n</code></pre> <p>You can then run the tests with the following command:</p> <pre><code>python -m pytest --cov rio_tiler_pds --cov-report term-missing\n</code></pre>"},{"location":"contributing/#pre-commit","title":"pre-commit","text":"<p>This repo is set to use <code>pre-commit</code> to run isort, flake8, pydocstring, black (\"uncompromising Python code formatter\") and mypy when committing new code.</p> <pre><code>$ pre-commit install\n</code></pre>"},{"location":"contributing/#docs","title":"Docs","text":"<pre><code>pip install rio_tiler_pds[\"docs\"]\n</code></pre> <p>Hot-reloading docs:</p> <pre><code>git clone https://github.com/cogeotiff/rio-tiler-pds\ncd rio-tiler-pds\nmkdocs serve -f docs/mkdocs.yml\n</code></pre> <p>To manually deploy docs (note you should never need to do this because Github Actions deploys automatically for new commits.):</p> <pre><code>mkdocs gh-deploy -f docs/mkdocs.yml\n</code></pre>"},{"location":"release-notes/","title":"Release Notes","text":""},{"location":"release-notes/#0111-2025-01-28","title":"0.11.1 (2025-01-28)","text":"<ul> <li>add support for Sentinel 2C</li> </ul>"},{"location":"release-notes/#0110-2024-12-20","title":"0.11.0 (2024-12-20)","text":"<ul> <li>update rio-tiler requirement to <code>&gt;=7.0,&lt;8.0</code></li> <li>replace <code>geographic bounds</code> with dataset bounds in <code>Reader.info()</code> method's response breaking change</li> <li>remove <code>minzoom</code> and <code>maxzoom</code> properties in <code>Info</code> model breaking change</li> <li>add python 3.12 and 3.13 support</li> </ul>"},{"location":"release-notes/#0101-2023-08-21","title":"0.10.1 (2023-08-21)","text":"<ul> <li>calculate scene bounds from multipolygons for Sentinel-1</li> <li>allow <code>Stripmap</code> beam mode for sentinel-1 dataset</li> </ul>"},{"location":"release-notes/#0100-2023-07-25","title":"0.10.0 (2023-07-25)","text":"<ul> <li>update rio-tiler requirement to <code>&gt;=5.0,&lt;7.0</code></li> </ul>"},{"location":"release-notes/#090-2023-07-13","title":"0.9.0 (2023-07-13)","text":"<ul> <li>update rio-tiler requirement to <code>&gt;=5.0,&lt;6.0</code></li> <li>add <code>rio_tiler_pds.copernicus.aws.Dem30Reader</code> and <code>rio_tiler_pds.copernicus.aws.Dem90Reader</code> mosaic readers</li> <li>add <code>boto3</code> in dependencies</li> </ul>"},{"location":"release-notes/#080-2023-04-11","title":"0.8.0 (2023-04-11)","text":"<ul> <li>remove Landsat 8 Collection 1</li> <li>remove python 3.7 and add python 3.10/3.11 support</li> <li>switch to ruff</li> <li>fix issue with latest STAC Items for Sentinel-2-l2a-cogs (author @dvd3v, cogeotiff/rio-tiler-pds!64)</li> <li>update rio-tiler requirement to <code>&gt;=4.0,&lt;5.0</code></li> </ul>"},{"location":"release-notes/#070-2022-06-08","title":"0.7.0 (2022-06-08)","text":"<ul> <li>enable <code>bucket</code> and <code>prefix_pattern</code> as input (@author @f-skold, cogeotiff/rio-tiler-pds!61)</li> <li>switch to <code>pyproject.toml</code></li> </ul>"},{"location":"release-notes/#060-2021-11-29","title":"0.6.0 (2021-11-29)","text":"<ul> <li>update rio-tiler requirement to <code>&gt;=3.0.0</code></li> </ul> <p>breaking changes</p> <ul> <li>remove python 3.6 support</li> <li><code>sceneid</code> -&gt; <code>input</code> in Reader attributes</li> <li>remove <code>.stats()</code> and <code>.metadata()</code> methods</li> <li><code>bands</code> is now optional for <code>.info()</code> and <code>.statistics</code></li> <li>remove useless <code>band_expression</code> option</li> </ul>"},{"location":"release-notes/#054-2021-10-08","title":"0.5.4 (2021-10-08)","text":"<ul> <li><code>bands</code> should be stored as <code>tuple</code> in sentinel-1 reader</li> </ul>"},{"location":"release-notes/#053-2021-10-08","title":"0.5.3 (2021-10-08)","text":"<ul> <li>Fix invalid sceneid parser for Sentinel-1</li> </ul>"},{"location":"release-notes/#052-2021-10-06","title":"0.5.2 (2021-10-06)","text":"<ul> <li>Fix available <code>bands</code> for Sentinel-1 based on Polarisation type (cogeotiff/rio-tiler-pds!59)</li> </ul>"},{"location":"release-notes/#051-2021-06-25","title":"0.5.1 (2021-06-25)","text":"<ul> <li>fix landsat <code>sceneid_parser</code> for Collection 2 Albers dataset (cogeotiff/rio-tiler-pds!56)</li> <li>allow <code>standard</code> and <code>albers</code> collections for Landsat Collection 2 reader (cogeotiff/rio-tiler-pds!58)</li> </ul>"},{"location":"release-notes/#050-2021-02-02","title":"0.5.0 (2021-02-02)","text":"<ul> <li>add AWS's Landsat Collection 2 support (author @kylebarron, cogeotiff/rio-tiler-pds!42)</li> <li>add sentinel-2 product ID parsing (ref: cogeotiff/rio-tiler-pds!33).</li> <li>fix issue where the sequence number of a sentinel scene id can be two digit (ref: cogeotiff/rio-tiler-pds!35)</li> <li>fix issue where <code>utm</code> is only one sigle digit (ref: cogeotiff/rio-tiler-pds!34)</li> <li>add top level export (cogeotiff/rio-tiler-pds#45)</li> <li>removes <code>get_object</code> from top level export</li> <li>add deprecation warning in L8Reader (cogeotiff/rio-tiler-pds#40)</li> </ul>"},{"location":"release-notes/#041-2020-11-24","title":"0.4.1 (2020-11-24)","text":"<ul> <li>update for rio-tiler 2.0.0rc3</li> </ul>"},{"location":"release-notes/#040-2020-11-09","title":"0.4.0 (2020-11-09)","text":"<ul> <li>update for rio-tiler==2.0.0rc</li> <li>internal refactor of the Landsat8 reader</li> <li>add <code>sentinel.aws.sentinel2.S2JP2Reader</code> and <code>aws.sentinel2.S2COGReader</code> proxies to readers.</li> </ul> <pre><code>from rio_tiler_pds.sentinel.aws import S2COGReader, S2JP2Reader\n\nwith S2JP2Reader(\"S2A_L2A_20170729_19UDP_0\") as scene:\n    print(type(scene))\n&gt;&gt;&gt; &lt;class 'rio_tiler_pds.sentinel.aws.sentinel2.S2L2AReader'&gt;\n\nwith S2JP2Reader(\"S2A_L1C_20170729_19UDP_0\") as scene:\n    print(type(scene))\n&gt;&gt;&gt; &lt;class 'rio_tiler_pds.sentinel.aws.sentinel2.S2L1CReader'&gt;\n\n\nwith S2COGReader(\"S2A_29RKH_20200219_0_L2A\") as scene:\n    print(type(scene))\n&gt;&gt;&gt; &lt;class 'rio_tiler_pds.sentinel.aws.sentinel2.S2L2ACOGReader'&gt;\n</code></pre>"},{"location":"release-notes/#032-2020-10-13","title":"0.3.2 (2020-10-13)","text":"<ul> <li>add <code>TMS</code> options to adapt  for rio-tiler 2.0.0b17 (ref: cogeotiff/rio-tiler!285)</li> </ul>"},{"location":"release-notes/#031-2020-10-07","title":"0.3.1 (2020-10-07)","text":"<ul> <li>remove <code>pkg_resources</code> (pypa/setuptools#510)</li> </ul>"},{"location":"release-notes/#030-2020-10-03","title":"0.3.0 (2020-10-03)","text":"<ul> <li>Update sentinel2-cogs image path (cogeotiff/rio-tiler-pds!22).</li> <li>Remove ContextManager requirement in base class and update for rio-tiler 2.0b13 (cogeotiff/rio-tiler!265).</li> <li>Add MODIS (PDS and Astraea) dataset (cogeotiff/rio-tiler-pds#18)</li> <li>move reader base classes to rio-tiler (cogeotiff/rio-tiler-pds#24)</li> <li>add missing <code>0</code> (e.g \"B1\" -&gt; \"B01\") when user forget it on sentinel and modis band names (cogeotiff/rio-tiler-pds#25)</li> </ul>"},{"location":"release-notes/#021-2020-09-25","title":"0.2.1 (2020-09-25)","text":"<ul> <li>add support for CBERS-4A (author @fredliporace)</li> </ul>"},{"location":"release-notes/#020-2020-08-31","title":"0.2.0 (2020-08-31)","text":"<ul> <li>Revert the use of <code>assets</code> options to <code>bands</code> (#12)</li> </ul> <pre><code>from rio_tiler_pds.landsat.aws import L8Reader\n\nwith L8Reader(\"LC08_L1TP_016037_20170813_20170814_01_RT\") as landsat:\n    # in 0.1.1 (PAST)\n    tile, data = landsat.tile(x, y, z, assets=\"B1\")\n\n    # in 0.2.0 (NOW)\n    tile, data = landsat.tile(x, y, z, bands=\"B1\")\n</code></pre>"},{"location":"release-notes/#011-2020-08-28","title":"0.1.1 (2020-08-28)","text":"<ul> <li>avoid <code>nodata</code> options colision with kwargs in L8Reader</li> </ul>"},{"location":"release-notes/#010-2020-08-27","title":"0.1.0 (2020-08-27)","text":"<p>Initial release.</p> <ul> <li>Move code from rio-tiler</li> <li>Update for rio-tiler==2.0b8 (use COGReader and MultiBaseReader)</li> <li>Create new Classes (using attrs) and use ContextManager (<code>with Reader(\"sceneid\") as scene:</code>)</li> <li>Remove Landsat 8 pre-collection support</li> <li>Add Sentinel 2 COGs dataset support</li> <li>Use TileInfo.json and ProductInfo.json to retrieve Sentinel 1 &amp; 2 bounds</li> <li>Use <code>assets</code> options instead of <code>bands</code></li> <li>Add <code>expression</code> options in readers</li> </ul>"},{"location":"release-notes/#readers","title":"Readers","text":"<pre><code>from rio_tiler_pds.landsat.aws import L8Reader\nfrom rio_tiler_pds.sentinel.aws import S1L1CReader\nfrom rio_tiler_pds.sentinel.aws import (\n    S2L1CReader,  # JPEG2000\n    S2L2AReader,  # JPEG2000\n    S2L2ACOGReader,   # COG\n)\nfrom rio_tiler_pds.cbers.aws import CBERSReader\n</code></pre>"},{"location":"release-notes/#example","title":"Example","text":"<pre><code>from rio_tiler_pds.landsat.aws import L8Reader\n\nwith L8Reader(\"LC08_L1TP_016037_20170813_20170814_01_RT\") as landsat:\n    tile, data = landsat.tile(x, y, z, assets=\"B1\")\n    tile, data = landsat.tile(x, y, z, expression=\"B1/B2\")\n</code></pre>"},{"location":"API/cbers/","title":"CBERS","text":""},{"location":"API/cbers/#readers","title":"Readers","text":"class Bases rio_tiler.io.base.MultiBandReader rio_tiler.io.base.SpatialMixin <p>AWS Public Dataset CBERS 4 reader.</p> Parameters <ul> <li><code>tms</code> (TileMatrixSet, optional) \u2014 </li> <li><code>input</code> (str) \u2014 </li> <li><code>minzoom</code> (int, optional) \u2014 </li> <li><code>maxzoom</code> (int, optional) \u2014 </li> <li><code>reader_options</code> (dict, optional) \u2014 </li> <li><code>reader</code> (type of Reader, optional) \u2014 </li> <li><code>bucket</code> (str, optional) \u2014 </li> <li><code>prefix_pattern</code> (str, optional) \u2014 </li> </ul> Attributes <ul> <li><code>bands</code> (tuple) \u2014 list of available bands (default is defined for each sensor).</li> <li><code>bounds</code> \u2014 </li> <li><code>crs</code> \u2014 </li> <li><code>input</code> (any) \u2014 input data.</li> <li><code>maxzoom</code> (int, optional) \u2014 Set dataset's maxzoom.</li> <li><code>minzoom</code> (int, optional) \u2014 Set dataset's minzoom.</li> <li><code>reader_options</code> (dict, option) \u2014 options to forward to the reader. Defaults to <code>{}</code>.</li> <li><code>scene_params</code> (dict) \u2014 scene id parameters.</li> <li><code>tms</code> (morecantile.TileMatrixSet, optional) \u2014 TileMatrixSet grid definition. Defaults to <code>WebMercatorQuad</code>.</li> </ul> Examples <pre><code>&gt;&gt;&gt; with CBERSReader('CBERS_4_AWFI_20170420_146_129_L2') as scene:\n        print(scene.bounds)\n</code></pre> Methods <ul> <li><code>__attrs_post_init__</code><code>(</code><code>)</code> \u2014 Fetch Reference band to get the bounds.</li> <li><code>__enter__</code><code>(</code><code>)</code> \u2014 Support using with Context Managers.</li> <li><code>__exit__</code><code>(</code><code>exc_type</code>, <code>exc_value</code>, <code>traceback</code><code>)</code> \u2014 Support using with Context Managers.</li> <li><code>feature</code><code>(</code><code>shape</code>, <code>bands</code>, <code>expression</code>, <code>**kwargs</code><code>)</code> (rio_tiler.models.ImageData) \u2014 Read and merge parts defined by geojson feature from multiple bands.</li> <li><code>get_geographic_bounds</code><code>(</code><code>crs</code><code>)</code> (float, float, float, float) \u2014 Return Geographic Bounds for a Geographic CRS.</li> <li><code>info</code><code>(</code><code>bands</code>, <code>**kwargs</code><code>)</code> (dict) \u2014 Return metadata from multiple bands.</li> <li><code>parse_expression</code><code>(</code><code>expression</code><code>)</code> (tuple) \u2014 Parse rio-tiler band math expression.</li> <li><code>part</code><code>(</code><code>bbox</code>, <code>bands</code>, <code>expression</code>, <code>**kwargs</code><code>)</code> (rio_tiler.models.ImageData) \u2014 Read and merge parts from multiple bands.</li> <li><code>point</code><code>(</code><code>lon</code>, <code>lat</code>, <code>bands</code>, <code>expression</code>, <code>**kwargs</code><code>)</code> (PointData) \u2014 Read a pixel values from multiple bands.</li> <li><code>preview</code><code>(</code><code>bands</code>, <code>expression</code>, <code>**kwargs</code><code>)</code> (rio_tiler.models.ImageData) \u2014 Read and merge previews from multiple bands.</li> <li><code>statistics</code><code>(</code><code>bands</code>, <code>expression</code>, <code>categorical</code>, <code>categories</code>, <code>percentiles</code>, <code>hist_options</code>, <code>max_size</code>, <code>**kwargs</code><code>)</code> (dict) \u2014 Return array statistics for multiple assets.</li> <li><code>tile</code><code>(</code><code>tile_x</code>, <code>tile_y</code>, <code>tile_z</code>, <code>bands</code>, <code>expression</code>, <code>**kwargs</code><code>)</code> (rio_tiler.models.ImageData) \u2014 Read and merge Web Map tiles multiple bands.</li> <li><code>tile_exists</code><code>(</code><code>tile_x</code>, <code>tile_y</code>, <code>tile_z</code><code>)</code> (bool) \u2014 Check if a tile intersects the dataset bounds.</li> </ul> method <p>Return Geographic Bounds for a Geographic CRS.</p> Parameters <ul> <li><code>crs</code> (CRS) \u2014 </li> </ul> method <p>Check if a tile intersects the dataset bounds.</p> Parameters <ul> <li><code>tile_x</code> (int) \u2014 Tile's horizontal index.</li> <li><code>tile_y</code> (int) \u2014 Tile's vertical index.</li> <li><code>tile_z</code> (int) \u2014 Tile's zoom level index.</li> </ul> Returns (bool) <p>True if the tile intersects the dataset bounds.</p> method <p>Support using with Context Managers.</p> method <p>Support using with Context Managers.</p> Parameters <ul> <li><code>exc_type</code> \u2014 </li> <li><code>exc_value</code> \u2014 </li> <li><code>traceback</code> \u2014 </li> </ul> method <p>Parse rio-tiler band math expression.</p> Parameters <ul> <li><code>expression</code> (str) \u2014 </li> </ul> method <p>Return metadata from multiple bands.</p> Parameters <ul> <li><code>bands</code> (sequence of str or str, optional) \u2014 band names to fetch info from. Required keyword argument.</li> <li><code>**kwargs</code> (any) \u2014 </li> </ul> Returns (dict) <p>Multiple bands info in form of {\"band1\": rio_tile.models.Info}.</p> method <p>Return array statistics for multiple assets.</p> Parameters <ul> <li><code>bands</code> (sequence of str or str) \u2014 bands to fetch info from. Required keyword argument.</li> <li><code>expression</code> (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3).</li> <li><code>categorical</code> (bool) \u2014 treat input data as categorical data. Defaults to False.</li> <li><code>categories</code> (list of numbers, optional) \u2014 list of categories to return value for.</li> <li><code>percentiles</code> (list of numbers, optional) \u2014 list of percentile values to calculate. Defaults to <code>[2, 98]</code>.</li> <li><code>hist_options</code> (dict, optional) \u2014 Options to forward to numpy.histogram function.</li> <li><code>max_size</code> (int, optional) \u2014 Limit the size of the longest dimension of the dataset read, respecting bounds X/Y aspect ratio. Defaults to 1024.</li> <li><code>**kwargs</code> (any) \u2014 </li> </ul> Returns (dict) <p>Multiple assets statistics in form of {\"{band}/{expression}\": rio_tiler.models.BandStatistics, ...}.</p> method <p>Read and merge Web Map tiles multiple bands.</p> Parameters <ul> <li><code>tile_x</code> (int) \u2014 Tile's horizontal index.</li> <li><code>tile_y</code> (int) \u2014 Tile's vertical index.</li> <li><code>tile_z</code> (int) \u2014 Tile's zoom level index.</li> <li><code>bands</code> (sequence of str or str, optional) \u2014 bands to fetch info from.</li> <li><code>expression</code> (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3).</li> <li><code>**kwargs</code> (any) \u2014 </li> </ul> Returns (rio_tiler.models.ImageData) <p>ImageData instance with data, mask and tile spatial info.</p> method <p>Read and merge parts from multiple bands.</p> Parameters <ul> <li><code>bbox</code> (tuple) \u2014 Output bounds (left, bottom, right, top) in target crs.</li> <li><code>bands</code> (sequence of str or str, optional) \u2014 bands to fetch info from.</li> <li><code>expression</code> (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3).</li> <li><code>**kwargs</code> (any) \u2014 </li> </ul> Returns (rio_tiler.models.ImageData) <p>ImageData instance with data, mask and tile spatial info.</p> method <p>Read and merge previews from multiple bands.</p> Parameters <ul> <li><code>bands</code> (sequence of str or str, optional) \u2014 bands to fetch info from.</li> <li><code>expression</code> (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3).</li> <li><code>**kwargs</code> (any) \u2014 </li> </ul> Returns (rio_tiler.models.ImageData) <p>ImageData instance with data, mask and tile spatial info.</p> method <p>Read a pixel values from multiple bands.</p> Parameters <ul> <li><code>lon</code> (float) \u2014 Longitude.</li> <li><code>lat</code> (float) \u2014 Latitude.</li> <li><code>bands</code> (sequence of str or str, optional) \u2014 bands to fetch info from.</li> <li><code>expression</code> (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3).</li> <li><code>**kwargs</code> (any) \u2014 </li> </ul> Returns (PointData) <p>PointData</p> method <p>Read and merge parts defined by geojson feature from multiple bands.</p> Parameters <ul> <li><code>shape</code> (dict) \u2014 Valid GeoJSON feature.</li> <li><code>bands</code> (sequence of str or str, optional) \u2014 bands to fetch info from.</li> <li><code>expression</code> (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3).</li> <li><code>**kwargs</code> (any) \u2014 </li> </ul> Returns (rio_tiler.models.ImageData) <p>ImageData instance with data, mask and tile spatial info.</p> method <p>Fetch Reference band to get the bounds.</p>"},{"location":"API/cbers/#rio_tiler_pdscbersawscbers4cbersreader","title":"<code>rio_tiler_pds.cbers.aws.cbers4.</code><code>CBERSReader</code><code>(</code><code>input</code>, <code>tms=&lt;TileMatrixSet title='Google Maps Compatible for the World' id='WebMercatorQuad' crs='http://www.opengis.net/def/crs/EPSG/0/3857&gt;</code>, <code>minzoom=None</code>, <code>maxzoom=None</code>, <code>reader=&lt;class 'rio_tiler.io.rasterio.Reader'&gt;</code>, <code>reader_options=NOTHING</code>, <code>bucket='cbers-pds'</code>, <code>prefix_pattern='CBERS{mission}/{instrument}/{path}/{row}/{scene}'</code><code>)</code>","text":""},{"location":"API/cbers/#rio_tileriobasespatialmixinget_geographic_bounds","title":"<code>get_geographic_bounds</code><code>(</code><code>crs</code><code>)</code> \u2192 (float, float, float, float)","text":""},{"location":"API/cbers/#rio_tileriobasespatialmixintile_exists","title":"<code>tile_exists</code><code>(</code><code>tile_x</code>, <code>tile_y</code>, <code>tile_z</code><code>)</code>","text":""},{"location":"API/cbers/#rio_tileriobasemultibandreaderenter","title":"<code>__enter__</code><code>(</code><code>)</code>","text":""},{"location":"API/cbers/#rio_tileriobasemultibandreaderexit","title":"<code>__exit__</code><code>(</code><code>exc_type</code>, <code>exc_value</code>, <code>traceback</code><code>)</code>","text":""},{"location":"API/cbers/#rio_tileriobasemultibandreaderparse_expression","title":"<code>parse_expression</code><code>(</code><code>expression</code><code>)</code> \u2192 tuple","text":""},{"location":"API/cbers/#rio_tileriobasemultibandreaderinfo","title":"<code>info</code><code>(</code><code>bands=None</code>, <code>**kwargs</code><code>)</code>","text":""},{"location":"API/cbers/#rio_tileriobasemultibandreaderstatistics","title":"<code>statistics</code><code>(</code><code>bands=None</code>, <code>expression=None</code>, <code>categorical=False</code>, <code>categories=None</code>, <code>percentiles=None</code>, <code>hist_options=None</code>, <code>max_size=1024</code>, <code>**kwargs</code><code>)</code>","text":""},{"location":"API/cbers/#rio_tileriobasemultibandreadertile","title":"<code>tile</code><code>(</code><code>tile_x</code>, <code>tile_y</code>, <code>tile_z</code>, <code>bands=None</code>, <code>expression=None</code>, <code>**kwargs</code><code>)</code>","text":""},{"location":"API/cbers/#rio_tileriobasemultibandreaderpart","title":"<code>part</code><code>(</code><code>bbox</code>, <code>bands=None</code>, <code>expression=None</code>, <code>**kwargs</code><code>)</code>","text":""},{"location":"API/cbers/#rio_tileriobasemultibandreaderpreview","title":"<code>preview</code><code>(</code><code>bands=None</code>, <code>expression=None</code>, <code>**kwargs</code><code>)</code>","text":""},{"location":"API/cbers/#rio_tileriobasemultibandreaderpoint","title":"<code>point</code><code>(</code><code>lon</code>, <code>lat</code>, <code>bands=None</code>, <code>expression=None</code>, <code>**kwargs</code><code>)</code>","text":""},{"location":"API/cbers/#rio_tileriobasemultibandreaderfeature","title":"<code>feature</code><code>(</code><code>shape</code>, <code>bands=None</code>, <code>expression=None</code>, <code>**kwargs</code><code>)</code>","text":""},{"location":"API/cbers/#rio_tiler_pdscbersawscbers4cbersreaderattrs_post_init","title":"<code>__attrs_post_init__</code><code>(</code><code>)</code>","text":""},{"location":"API/cbers/#utils","title":"Utils","text":"function <p>Parse CBERS 4/4A scene id.</p> Parameters <ul> <li><code>sceneid</code> (str) \u2014 CBERS 4/4A sceneid.</li> </ul> Returns (dict) <p>dictionary with metadata constructed from the sceneid.</p> Raises <ul> <li><code>InvalidCBERSSceneId</code> \u2014 If <code>sceneid</code> doesn't match the regex schema.</li> </ul> Examples <pre><code>&gt;&gt;&gt; sceneid_parser('CBERS_4_MUX_20171121_057_094_L2')\n</code></pre>"},{"location":"API/cbers/#rio_tiler_pdscbersutilssceneid_parser","title":"<code>rio_tiler_pds.cbers.utils.</code><code>sceneid_parser</code><code>(</code><code>sceneid</code><code>)</code>","text":""},{"location":"API/landsat-c2/","title":"Landsat Collection 2","text":""},{"location":"API/landsat-c2/#readers","title":"Readers","text":"class Bases rio_tiler.io.base.MultiBandReader rio_tiler.io.base.SpatialMixin <p>AWS Public Dataset Landsat Collection 2 COG Reader.</p> Parameters <ul> <li><code>tms</code> (TileMatrixSet, optional) \u2014 </li> <li><code>input</code> (str) \u2014 Landsat 8 sceneid.</li> <li><code>minzoom</code> (int, optional) \u2014 </li> <li><code>maxzoom</code> (int, optional) \u2014 </li> <li><code>reader_options</code> (dict, optional) \u2014 </li> <li><code>reader</code> (type of Reader, optional) \u2014 </li> <li><code>bucket</code> (str, optional) \u2014 </li> <li><code>prefix_pattern</code> (str, optional) \u2014 </li> </ul> Attributes <ul> <li><code>bands</code> (tuple) \u2014 list of available bands.</li> <li><code>bounds</code> \u2014 </li> <li><code>crs</code> \u2014 </li> <li><code>input</code> (any) \u2014 input data.</li> <li><code>maxzoom</code> (int) \u2014 Dataset's Max Zoom level (default is 12).</li> <li><code>minzoom</code> (int) \u2014 Dataset's Min Zoom level (default is 5).</li> <li><code>reader_options</code> (dict, option) \u2014 options to forward to the reader. Defaults to <code>{}</code>.</li> <li><code>scene_params</code> (dict) \u2014 scene id parameters.</li> <li><code>stac_item</code> \u2014 </li> <li><code>tms</code> (morecantile.TileMatrixSet, optional) \u2014 TileMatrixSet grid definition. Defaults to <code>WebMercatorQuad</code>.</li> </ul> Examples <pre><code>&gt;&gt;&gt; with LandsatC2Reader('LC08_L2SR_093106_20200207_20201016_02_T2') as scene:\n        print(scene.bounds)\n</code></pre> <pre><code>&gt;&gt;&gt; with LandsatC2Reader('LC08_L1TP_116043_20201122_20201122_02_RT') as scene:\n        print(scene.bounds)\n</code></pre> Methods <ul> <li><code>__attrs_post_init__</code><code>(</code><code>)</code> \u2014 Fetch productInfo and get bounds.</li> <li><code>__enter__</code><code>(</code><code>)</code> \u2014 Support using with Context Managers.</li> <li><code>__exit__</code><code>(</code><code>exc_type</code>, <code>exc_value</code>, <code>traceback</code><code>)</code> \u2014 Support using with Context Managers.</li> <li><code>feature</code><code>(</code><code>shape</code>, <code>bands</code>, <code>expression</code>, <code>**kwargs</code><code>)</code> (rio_tiler.models.ImageData) \u2014 Read and merge parts defined by geojson feature from multiple bands.</li> <li><code>get_geographic_bounds</code><code>(</code><code>crs</code><code>)</code> (float, float, float, float) \u2014 Return Geographic Bounds for a Geographic CRS.</li> <li><code>get_geometry</code><code>(</code><code>)</code> \u2014 Fetch geometry info for the scene.</li> <li><code>info</code><code>(</code><code>bands</code>, <code>**kwargs</code><code>)</code> (dict) \u2014 Return metadata from multiple bands.</li> <li><code>parse_expression</code><code>(</code><code>expression</code><code>)</code> (tuple) \u2014 Parse rio-tiler band math expression.</li> <li><code>part</code><code>(</code><code>bbox</code>, <code>bands</code>, <code>expression</code>, <code>**kwargs</code><code>)</code> (rio_tiler.models.ImageData) \u2014 Read and merge parts from multiple bands.</li> <li><code>point</code><code>(</code><code>lon</code>, <code>lat</code>, <code>bands</code>, <code>expression</code>, <code>**kwargs</code><code>)</code> (PointData) \u2014 Read a pixel values from multiple bands.</li> <li><code>preview</code><code>(</code><code>bands</code>, <code>expression</code>, <code>**kwargs</code><code>)</code> (rio_tiler.models.ImageData) \u2014 Read and merge previews from multiple bands.</li> <li><code>statistics</code><code>(</code><code>bands</code>, <code>expression</code>, <code>categorical</code>, <code>categories</code>, <code>percentiles</code>, <code>hist_options</code>, <code>max_size</code>, <code>**kwargs</code><code>)</code> (dict) \u2014 Return array statistics for multiple assets.</li> <li><code>tile</code><code>(</code><code>tile_x</code>, <code>tile_y</code>, <code>tile_z</code>, <code>bands</code>, <code>expression</code>, <code>**kwargs</code><code>)</code> (rio_tiler.models.ImageData) \u2014 Read and merge Web Map tiles multiple bands.</li> <li><code>tile_exists</code><code>(</code><code>tile_x</code>, <code>tile_y</code>, <code>tile_z</code><code>)</code> (bool) \u2014 Check if a tile intersects the dataset bounds.</li> </ul> method <p>Return Geographic Bounds for a Geographic CRS.</p> Parameters <ul> <li><code>crs</code> (CRS) \u2014 </li> </ul> method <p>Check if a tile intersects the dataset bounds.</p> Parameters <ul> <li><code>tile_x</code> (int) \u2014 Tile's horizontal index.</li> <li><code>tile_y</code> (int) \u2014 Tile's vertical index.</li> <li><code>tile_z</code> (int) \u2014 Tile's zoom level index.</li> </ul> Returns (bool) <p>True if the tile intersects the dataset bounds.</p> method <p>Support using with Context Managers.</p> method <p>Support using with Context Managers.</p> Parameters <ul> <li><code>exc_type</code> \u2014 </li> <li><code>exc_value</code> \u2014 </li> <li><code>traceback</code> \u2014 </li> </ul> method <p>Parse rio-tiler band math expression.</p> Parameters <ul> <li><code>expression</code> (str) \u2014 </li> </ul> method <p>Return metadata from multiple bands.</p> Parameters <ul> <li><code>bands</code> (sequence of str or str, optional) \u2014 band names to fetch info from. Required keyword argument.</li> <li><code>**kwargs</code> (any) \u2014 </li> </ul> Returns (dict) <p>Multiple bands info in form of {\"band1\": rio_tile.models.Info}.</p> method <p>Return array statistics for multiple assets.</p> Parameters <ul> <li><code>bands</code> (sequence of str or str) \u2014 bands to fetch info from. Required keyword argument.</li> <li><code>expression</code> (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3).</li> <li><code>categorical</code> (bool) \u2014 treat input data as categorical data. Defaults to False.</li> <li><code>categories</code> (list of numbers, optional) \u2014 list of categories to return value for.</li> <li><code>percentiles</code> (list of numbers, optional) \u2014 list of percentile values to calculate. Defaults to <code>[2, 98]</code>.</li> <li><code>hist_options</code> (dict, optional) \u2014 Options to forward to numpy.histogram function.</li> <li><code>max_size</code> (int, optional) \u2014 Limit the size of the longest dimension of the dataset read, respecting bounds X/Y aspect ratio. Defaults to 1024.</li> <li><code>**kwargs</code> (any) \u2014 </li> </ul> Returns (dict) <p>Multiple assets statistics in form of {\"{band}/{expression}\": rio_tiler.models.BandStatistics, ...}.</p> method <p>Read and merge Web Map tiles multiple bands.</p> Parameters <ul> <li><code>tile_x</code> (int) \u2014 Tile's horizontal index.</li> <li><code>tile_y</code> (int) \u2014 Tile's vertical index.</li> <li><code>tile_z</code> (int) \u2014 Tile's zoom level index.</li> <li><code>bands</code> (sequence of str or str, optional) \u2014 bands to fetch info from.</li> <li><code>expression</code> (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3).</li> <li><code>**kwargs</code> (any) \u2014 </li> </ul> Returns (rio_tiler.models.ImageData) <p>ImageData instance with data, mask and tile spatial info.</p> method <p>Read and merge parts from multiple bands.</p> Parameters <ul> <li><code>bbox</code> (tuple) \u2014 Output bounds (left, bottom, right, top) in target crs.</li> <li><code>bands</code> (sequence of str or str, optional) \u2014 bands to fetch info from.</li> <li><code>expression</code> (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3).</li> <li><code>**kwargs</code> (any) \u2014 </li> </ul> Returns (rio_tiler.models.ImageData) <p>ImageData instance with data, mask and tile spatial info.</p> method <p>Read and merge previews from multiple bands.</p> Parameters <ul> <li><code>bands</code> (sequence of str or str, optional) \u2014 bands to fetch info from.</li> <li><code>expression</code> (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3).</li> <li><code>**kwargs</code> (any) \u2014 </li> </ul> Returns (rio_tiler.models.ImageData) <p>ImageData instance with data, mask and tile spatial info.</p> method <p>Read a pixel values from multiple bands.</p> Parameters <ul> <li><code>lon</code> (float) \u2014 Longitude.</li> <li><code>lat</code> (float) \u2014 Latitude.</li> <li><code>bands</code> (sequence of str or str, optional) \u2014 bands to fetch info from.</li> <li><code>expression</code> (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3).</li> <li><code>**kwargs</code> (any) \u2014 </li> </ul> Returns (PointData) <p>PointData</p> method <p>Read and merge parts defined by geojson feature from multiple bands.</p> Parameters <ul> <li><code>shape</code> (dict) \u2014 Valid GeoJSON feature.</li> <li><code>bands</code> (sequence of str or str, optional) \u2014 bands to fetch info from.</li> <li><code>expression</code> (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3).</li> <li><code>**kwargs</code> (any) \u2014 </li> </ul> Returns (rio_tiler.models.ImageData) <p>ImageData instance with data, mask and tile spatial info.</p> method <p>Fetch productInfo and get bounds.</p> method <p>Fetch geometry info for the scene.</p>"},{"location":"API/landsat-c2/#rio_tiler_pdslandsatawslandsat_collection2landsatc2reader","title":"<code>rio_tiler_pds.landsat.aws.landsat_collection2.</code><code>LandsatC2Reader</code><code>(</code><code>input</code>, <code>tms=&lt;TileMatrixSet title='Google Maps Compatible for the World' id='WebMercatorQuad' crs='http://www.opengis.net/def/crs/EPSG/0/3857&gt;</code>, <code>minzoom=5</code>, <code>maxzoom=12</code>, <code>reader=&lt;class 'rio_tiler.io.rasterio.Reader'&gt;</code>, <code>reader_options=NOTHING</code>, <code>bucket='usgs-landsat'</code>, <code>prefix_pattern='collection02/level-{_processingLevelNum}/{category}/{_sensor_s3_prefix}/{acquisitionYear}/{path}/{row}/{scene}/{scene}'</code><code>)</code>","text":""},{"location":"API/landsat-c2/#rio_tileriobasespatialmixinget_geographic_bounds","title":"<code>get_geographic_bounds</code><code>(</code><code>crs</code><code>)</code> \u2192 (float, float, float, float)","text":""},{"location":"API/landsat-c2/#rio_tileriobasespatialmixintile_exists","title":"<code>tile_exists</code><code>(</code><code>tile_x</code>, <code>tile_y</code>, <code>tile_z</code><code>)</code>","text":""},{"location":"API/landsat-c2/#rio_tileriobasemultibandreaderenter","title":"<code>__enter__</code><code>(</code><code>)</code>","text":""},{"location":"API/landsat-c2/#rio_tileriobasemultibandreaderexit","title":"<code>__exit__</code><code>(</code><code>exc_type</code>, <code>exc_value</code>, <code>traceback</code><code>)</code>","text":""},{"location":"API/landsat-c2/#rio_tileriobasemultibandreaderparse_expression","title":"<code>parse_expression</code><code>(</code><code>expression</code><code>)</code> \u2192 tuple","text":""},{"location":"API/landsat-c2/#rio_tileriobasemultibandreaderinfo","title":"<code>info</code><code>(</code><code>bands=None</code>, <code>**kwargs</code><code>)</code>","text":""},{"location":"API/landsat-c2/#rio_tileriobasemultibandreaderstatistics","title":"<code>statistics</code><code>(</code><code>bands=None</code>, <code>expression=None</code>, <code>categorical=False</code>, <code>categories=None</code>, <code>percentiles=None</code>, <code>hist_options=None</code>, <code>max_size=1024</code>, <code>**kwargs</code><code>)</code>","text":""},{"location":"API/landsat-c2/#rio_tileriobasemultibandreadertile","title":"<code>tile</code><code>(</code><code>tile_x</code>, <code>tile_y</code>, <code>tile_z</code>, <code>bands=None</code>, <code>expression=None</code>, <code>**kwargs</code><code>)</code>","text":""},{"location":"API/landsat-c2/#rio_tileriobasemultibandreaderpart","title":"<code>part</code><code>(</code><code>bbox</code>, <code>bands=None</code>, <code>expression=None</code>, <code>**kwargs</code><code>)</code>","text":""},{"location":"API/landsat-c2/#rio_tileriobasemultibandreaderpreview","title":"<code>preview</code><code>(</code><code>bands=None</code>, <code>expression=None</code>, <code>**kwargs</code><code>)</code>","text":""},{"location":"API/landsat-c2/#rio_tileriobasemultibandreaderpoint","title":"<code>point</code><code>(</code><code>lon</code>, <code>lat</code>, <code>bands=None</code>, <code>expression=None</code>, <code>**kwargs</code><code>)</code>","text":""},{"location":"API/landsat-c2/#rio_tileriobasemultibandreaderfeature","title":"<code>feature</code><code>(</code><code>shape</code>, <code>bands=None</code>, <code>expression=None</code>, <code>**kwargs</code><code>)</code>","text":""},{"location":"API/landsat-c2/#rio_tiler_pdslandsatawslandsat_collection2landsatc2readerattrs_post_init","title":"<code>__attrs_post_init__</code><code>(</code><code>)</code>","text":""},{"location":"API/landsat-c2/#rio_tiler_pdslandsatawslandsat_collection2landsatc2readerget_geometry","title":"<code>get_geometry</code><code>(</code><code>)</code>","text":""},{"location":"API/landsat-c2/#utils","title":"Utils","text":"function <p>Parse Landsat id.</p> <p>Author @perrygeo - www.perrygeo.com</p> Parameters <ul> <li><code>sceneid</code> (str) \u2014 Landsat sceneid.</li> </ul> Returns (dict) <p>dictionary with metadata constructed from the sceneid.</p> Raises <ul> <li><code>InvalidLandsatSceneId</code> \u2014 If <code>sceneid</code> doesn't match the regex schema.</li> </ul> Examples <pre><code>&gt;&gt;&gt; sceneid_parser('LC08_L1TP_016037_20170813_20170814_01_RT')\n</code></pre>"},{"location":"API/landsat-c2/#rio_tiler_pdslandsatutilssceneid_parser","title":"<code>rio_tiler_pds.landsat.utils.</code><code>sceneid_parser</code><code>(</code><code>sceneid</code><code>)</code>","text":""},{"location":"API/modis/","title":"MODIS","text":""},{"location":"API/modis/#modis-pds","title":"MODIS PDS","text":"class Bases rio_tiler.io.base.MultiBandReader rio_tiler.io.base.SpatialMixin <p>AWS Public Dataset MODIS reader.</p> Parameters <ul> <li><code>tms</code> (TileMatrixSet, optional) \u2014 </li> <li><code>input</code> (str) \u2014 </li> <li><code>minzoom</code> (int, optional) \u2014 </li> <li><code>maxzoom</code> (int, optional) \u2014 </li> <li><code>reader_options</code> (dict, optional) \u2014 </li> <li><code>reader</code> (type of Reader, optional) \u2014 </li> <li><code>bucket</code> (str, optional) \u2014 </li> <li><code>prefix_pattern</code> (str, optional) \u2014 </li> </ul> Attributes <ul> <li><code>bands</code> (tuple) \u2014 list of available bands (default is defined for each sensor).</li> <li><code>bounds</code> \u2014 </li> <li><code>crs</code> \u2014 </li> <li><code>input</code> (any) \u2014 input data.</li> <li><code>maxzoom</code> (int, optional) \u2014 Set dataset's maxzoom.</li> <li><code>minzoom</code> (int, optional) \u2014 Set dataset's minzoom.</li> <li><code>reader_options</code> (dict, option) \u2014 options to forward to the reader. Defaults to <code>{}</code>.</li> <li><code>scene_params</code> (dict) \u2014 scene id parameters.</li> <li><code>tms</code> (morecantile.TileMatrixSet, optional) \u2014 TileMatrixSet grid definition. Defaults to <code>WebMercatorQuad</code>.</li> </ul> Examples <pre><code>&gt;&gt;&gt; with MODISReader('MCD43A4.A2017006.h21v11.006.2017018074804') as scene:\n        print(scene.bounds)\n</code></pre> Methods <ul> <li><code>__attrs_post_init__</code><code>(</code><code>)</code> \u2014 Parse Sceneid and get grid bounds.</li> <li><code>__enter__</code><code>(</code><code>)</code> \u2014 Support using with Context Managers.</li> <li><code>__exit__</code><code>(</code><code>exc_type</code>, <code>exc_value</code>, <code>traceback</code><code>)</code> \u2014 Support using with Context Managers.</li> <li><code>feature</code><code>(</code><code>shape</code>, <code>bands</code>, <code>expression</code>, <code>**kwargs</code><code>)</code> (rio_tiler.models.ImageData) \u2014 Read and merge parts defined by geojson feature from multiple bands.</li> <li><code>get_geographic_bounds</code><code>(</code><code>crs</code><code>)</code> (float, float, float, float) \u2014 Return Geographic Bounds for a Geographic CRS.</li> <li><code>info</code><code>(</code><code>bands</code>, <code>**kwargs</code><code>)</code> (dict) \u2014 Return metadata from multiple bands.</li> <li><code>parse_expression</code><code>(</code><code>expression</code><code>)</code> (tuple) \u2014 Parse rio-tiler band math expression.</li> <li><code>part</code><code>(</code><code>bbox</code>, <code>bands</code>, <code>expression</code>, <code>**kwargs</code><code>)</code> (rio_tiler.models.ImageData) \u2014 Read and merge parts from multiple bands.</li> <li><code>point</code><code>(</code><code>lon</code>, <code>lat</code>, <code>bands</code>, <code>expression</code>, <code>**kwargs</code><code>)</code> (PointData) \u2014 Read a pixel values from multiple bands.</li> <li><code>preview</code><code>(</code><code>bands</code>, <code>expression</code>, <code>**kwargs</code><code>)</code> (rio_tiler.models.ImageData) \u2014 Read and merge previews from multiple bands.</li> <li><code>statistics</code><code>(</code><code>bands</code>, <code>expression</code>, <code>categorical</code>, <code>categories</code>, <code>percentiles</code>, <code>hist_options</code>, <code>max_size</code>, <code>**kwargs</code><code>)</code> (dict) \u2014 Return array statistics for multiple assets.</li> <li><code>tile</code><code>(</code><code>tile_x</code>, <code>tile_y</code>, <code>tile_z</code>, <code>bands</code>, <code>expression</code>, <code>**kwargs</code><code>)</code> (rio_tiler.models.ImageData) \u2014 Read and merge Web Map tiles multiple bands.</li> <li><code>tile_exists</code><code>(</code><code>tile_x</code>, <code>tile_y</code>, <code>tile_z</code><code>)</code> (bool) \u2014 Check if a tile intersects the dataset bounds.</li> </ul> method <p>Return Geographic Bounds for a Geographic CRS.</p> Parameters <ul> <li><code>crs</code> (CRS) \u2014 </li> </ul> method <p>Check if a tile intersects the dataset bounds.</p> Parameters <ul> <li><code>tile_x</code> (int) \u2014 Tile's horizontal index.</li> <li><code>tile_y</code> (int) \u2014 Tile's vertical index.</li> <li><code>tile_z</code> (int) \u2014 Tile's zoom level index.</li> </ul> Returns (bool) <p>True if the tile intersects the dataset bounds.</p> method <p>Support using with Context Managers.</p> method <p>Support using with Context Managers.</p> Parameters <ul> <li><code>exc_type</code> \u2014 </li> <li><code>exc_value</code> \u2014 </li> <li><code>traceback</code> \u2014 </li> </ul> method <p>Parse rio-tiler band math expression.</p> Parameters <ul> <li><code>expression</code> (str) \u2014 </li> </ul> method <p>Return metadata from multiple bands.</p> Parameters <ul> <li><code>bands</code> (sequence of str or str, optional) \u2014 band names to fetch info from. Required keyword argument.</li> <li><code>**kwargs</code> (any) \u2014 </li> </ul> Returns (dict) <p>Multiple bands info in form of {\"band1\": rio_tile.models.Info}.</p> method <p>Return array statistics for multiple assets.</p> Parameters <ul> <li><code>bands</code> (sequence of str or str) \u2014 bands to fetch info from. Required keyword argument.</li> <li><code>expression</code> (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3).</li> <li><code>categorical</code> (bool) \u2014 treat input data as categorical data. Defaults to False.</li> <li><code>categories</code> (list of numbers, optional) \u2014 list of categories to return value for.</li> <li><code>percentiles</code> (list of numbers, optional) \u2014 list of percentile values to calculate. Defaults to <code>[2, 98]</code>.</li> <li><code>hist_options</code> (dict, optional) \u2014 Options to forward to numpy.histogram function.</li> <li><code>max_size</code> (int, optional) \u2014 Limit the size of the longest dimension of the dataset read, respecting bounds X/Y aspect ratio. Defaults to 1024.</li> <li><code>**kwargs</code> (any) \u2014 </li> </ul> Returns (dict) <p>Multiple assets statistics in form of {\"{band}/{expression}\": rio_tiler.models.BandStatistics, ...}.</p> method <p>Read and merge Web Map tiles multiple bands.</p> Parameters <ul> <li><code>tile_x</code> (int) \u2014 Tile's horizontal index.</li> <li><code>tile_y</code> (int) \u2014 Tile's vertical index.</li> <li><code>tile_z</code> (int) \u2014 Tile's zoom level index.</li> <li><code>bands</code> (sequence of str or str, optional) \u2014 bands to fetch info from.</li> <li><code>expression</code> (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3).</li> <li><code>**kwargs</code> (any) \u2014 </li> </ul> Returns (rio_tiler.models.ImageData) <p>ImageData instance with data, mask and tile spatial info.</p> method <p>Read and merge parts from multiple bands.</p> Parameters <ul> <li><code>bbox</code> (tuple) \u2014 Output bounds (left, bottom, right, top) in target crs.</li> <li><code>bands</code> (sequence of str or str, optional) \u2014 bands to fetch info from.</li> <li><code>expression</code> (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3).</li> <li><code>**kwargs</code> (any) \u2014 </li> </ul> Returns (rio_tiler.models.ImageData) <p>ImageData instance with data, mask and tile spatial info.</p> method <p>Read and merge previews from multiple bands.</p> Parameters <ul> <li><code>bands</code> (sequence of str or str, optional) \u2014 bands to fetch info from.</li> <li><code>expression</code> (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3).</li> <li><code>**kwargs</code> (any) \u2014 </li> </ul> Returns (rio_tiler.models.ImageData) <p>ImageData instance with data, mask and tile spatial info.</p> method <p>Read a pixel values from multiple bands.</p> Parameters <ul> <li><code>lon</code> (float) \u2014 Longitude.</li> <li><code>lat</code> (float) \u2014 Latitude.</li> <li><code>bands</code> (sequence of str or str, optional) \u2014 bands to fetch info from.</li> <li><code>expression</code> (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3).</li> <li><code>**kwargs</code> (any) \u2014 </li> </ul> Returns (PointData) <p>PointData</p> method <p>Read and merge parts defined by geojson feature from multiple bands.</p> Parameters <ul> <li><code>shape</code> (dict) \u2014 Valid GeoJSON feature.</li> <li><code>bands</code> (sequence of str or str, optional) \u2014 bands to fetch info from.</li> <li><code>expression</code> (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3).</li> <li><code>**kwargs</code> (any) \u2014 </li> </ul> Returns (rio_tiler.models.ImageData) <p>ImageData instance with data, mask and tile spatial info.</p> method <p>Parse Sceneid and get grid bounds.</p>"},{"location":"API/modis/#rio_tiler_pdsmodisawsmodis_pdsmodisreader","title":"<code>rio_tiler_pds.modis.aws.modis_pds.</code><code>MODISReader</code><code>(</code><code>input</code>, <code>tms=&lt;TileMatrixSet title='Google Maps Compatible for the World' id='WebMercatorQuad' crs='http://www.opengis.net/def/crs/EPSG/0/3857&gt;</code>, <code>minzoom=4</code>, <code>maxzoom=9</code>, <code>reader=&lt;class 'rio_tiler.io.rasterio.Reader'&gt;</code>, <code>reader_options=NOTHING</code>, <code>bucket='modis-pds'</code>, <code>prefix_pattern='{product}.{version}/{horizontal_grid}/{vertical_grid}/{date}'</code><code>)</code>","text":""},{"location":"API/modis/#rio_tileriobasespatialmixinget_geographic_bounds","title":"<code>get_geographic_bounds</code><code>(</code><code>crs</code><code>)</code> \u2192 (float, float, float, float)","text":""},{"location":"API/modis/#rio_tileriobasespatialmixintile_exists","title":"<code>tile_exists</code><code>(</code><code>tile_x</code>, <code>tile_y</code>, <code>tile_z</code><code>)</code>","text":""},{"location":"API/modis/#rio_tileriobasemultibandreaderenter","title":"<code>__enter__</code><code>(</code><code>)</code>","text":""},{"location":"API/modis/#rio_tileriobasemultibandreaderexit","title":"<code>__exit__</code><code>(</code><code>exc_type</code>, <code>exc_value</code>, <code>traceback</code><code>)</code>","text":""},{"location":"API/modis/#rio_tileriobasemultibandreaderparse_expression","title":"<code>parse_expression</code><code>(</code><code>expression</code><code>)</code> \u2192 tuple","text":""},{"location":"API/modis/#rio_tileriobasemultibandreaderinfo","title":"<code>info</code><code>(</code><code>bands=None</code>, <code>**kwargs</code><code>)</code>","text":""},{"location":"API/modis/#rio_tileriobasemultibandreaderstatistics","title":"<code>statistics</code><code>(</code><code>bands=None</code>, <code>expression=None</code>, <code>categorical=False</code>, <code>categories=None</code>, <code>percentiles=None</code>, <code>hist_options=None</code>, <code>max_size=1024</code>, <code>**kwargs</code><code>)</code>","text":""},{"location":"API/modis/#rio_tileriobasemultibandreadertile","title":"<code>tile</code><code>(</code><code>tile_x</code>, <code>tile_y</code>, <code>tile_z</code>, <code>bands=None</code>, <code>expression=None</code>, <code>**kwargs</code><code>)</code>","text":""},{"location":"API/modis/#rio_tileriobasemultibandreaderpart","title":"<code>part</code><code>(</code><code>bbox</code>, <code>bands=None</code>, <code>expression=None</code>, <code>**kwargs</code><code>)</code>","text":""},{"location":"API/modis/#rio_tileriobasemultibandreaderpreview","title":"<code>preview</code><code>(</code><code>bands=None</code>, <code>expression=None</code>, <code>**kwargs</code><code>)</code>","text":""},{"location":"API/modis/#rio_tileriobasemultibandreaderpoint","title":"<code>point</code><code>(</code><code>lon</code>, <code>lat</code>, <code>bands=None</code>, <code>expression=None</code>, <code>**kwargs</code><code>)</code>","text":""},{"location":"API/modis/#rio_tileriobasemultibandreaderfeature","title":"<code>feature</code><code>(</code><code>shape</code>, <code>bands=None</code>, <code>expression=None</code>, <code>**kwargs</code><code>)</code>","text":""},{"location":"API/modis/#rio_tiler_pdsmodisawsmodis_pdsmodisreaderattrs_post_init","title":"<code>__attrs_post_init__</code><code>(</code><code>)</code>","text":""},{"location":"API/modis/#modis-astraea","title":"MODIS ASTRAEA","text":"class Bases rio_tiler.io.base.MultiBandReader rio_tiler.io.base.SpatialMixin <p>AWS Public Dataset MODIS reader.</p> Parameters <ul> <li><code>tms</code> (TileMatrixSet, optional) \u2014 </li> <li><code>input</code> (str) \u2014 </li> <li><code>minzoom</code> (int, optional) \u2014 </li> <li><code>maxzoom</code> (int, optional) \u2014 </li> <li><code>reader_options</code> (dict, optional) \u2014 </li> <li><code>reader</code> (type of Reader, optional) \u2014 </li> <li><code>bucket</code> (str, optional) \u2014 </li> <li><code>prefix_pattern</code> (str, optional) \u2014 </li> </ul> Attributes <ul> <li><code>bands</code> (tuple) \u2014 list of available bands (default is defined for each sensor).</li> <li><code>bounds</code> \u2014 </li> <li><code>crs</code> \u2014 </li> <li><code>input</code> (any) \u2014 input data.</li> <li><code>maxzoom</code> (int, optional) \u2014 Set dataset's maxzoom.</li> <li><code>minzoom</code> (int, optional) \u2014 Set dataset's minzoom.</li> <li><code>reader_options</code> (dict, option) \u2014 options to forward to the reader. Defaults to <code>{}</code>.</li> <li><code>scene_params</code> (dict) \u2014 scene id parameters.</li> <li><code>tms</code> (morecantile.TileMatrixSet, optional) \u2014 TileMatrixSet grid definition. Defaults to <code>WebMercatorQuad</code>.</li> </ul> Examples <pre><code>&gt;&gt;&gt; with MODISReader('MCD43A4.A2017006.h21v11.006.2017018074804') as scene:\n        print(scene.bounds)\n</code></pre> Methods <ul> <li><code>__attrs_post_init__</code><code>(</code><code>)</code> \u2014 Parse Sceneid and get grid bounds.</li> <li><code>__enter__</code><code>(</code><code>)</code> \u2014 Support using with Context Managers.</li> <li><code>__exit__</code><code>(</code><code>exc_type</code>, <code>exc_value</code>, <code>traceback</code><code>)</code> \u2014 Support using with Context Managers.</li> <li><code>feature</code><code>(</code><code>shape</code>, <code>bands</code>, <code>expression</code>, <code>**kwargs</code><code>)</code> (rio_tiler.models.ImageData) \u2014 Read and merge parts defined by geojson feature from multiple bands.</li> <li><code>get_geographic_bounds</code><code>(</code><code>crs</code><code>)</code> (float, float, float, float) \u2014 Return Geographic Bounds for a Geographic CRS.</li> <li><code>info</code><code>(</code><code>bands</code>, <code>**kwargs</code><code>)</code> (dict) \u2014 Return metadata from multiple bands.</li> <li><code>parse_expression</code><code>(</code><code>expression</code><code>)</code> (tuple) \u2014 Parse rio-tiler band math expression.</li> <li><code>part</code><code>(</code><code>bbox</code>, <code>bands</code>, <code>expression</code>, <code>**kwargs</code><code>)</code> (rio_tiler.models.ImageData) \u2014 Read and merge parts from multiple bands.</li> <li><code>point</code><code>(</code><code>lon</code>, <code>lat</code>, <code>bands</code>, <code>expression</code>, <code>**kwargs</code><code>)</code> (PointData) \u2014 Read a pixel values from multiple bands.</li> <li><code>preview</code><code>(</code><code>bands</code>, <code>expression</code>, <code>**kwargs</code><code>)</code> (rio_tiler.models.ImageData) \u2014 Read and merge previews from multiple bands.</li> <li><code>statistics</code><code>(</code><code>bands</code>, <code>expression</code>, <code>categorical</code>, <code>categories</code>, <code>percentiles</code>, <code>hist_options</code>, <code>max_size</code>, <code>**kwargs</code><code>)</code> (dict) \u2014 Return array statistics for multiple assets.</li> <li><code>tile</code><code>(</code><code>tile_x</code>, <code>tile_y</code>, <code>tile_z</code>, <code>bands</code>, <code>expression</code>, <code>**kwargs</code><code>)</code> (rio_tiler.models.ImageData) \u2014 Read and merge Web Map tiles multiple bands.</li> <li><code>tile_exists</code><code>(</code><code>tile_x</code>, <code>tile_y</code>, <code>tile_z</code><code>)</code> (bool) \u2014 Check if a tile intersects the dataset bounds.</li> </ul> method <p>Return Geographic Bounds for a Geographic CRS.</p> Parameters <ul> <li><code>crs</code> (CRS) \u2014 </li> </ul> method <p>Check if a tile intersects the dataset bounds.</p> Parameters <ul> <li><code>tile_x</code> (int) \u2014 Tile's horizontal index.</li> <li><code>tile_y</code> (int) \u2014 Tile's vertical index.</li> <li><code>tile_z</code> (int) \u2014 Tile's zoom level index.</li> </ul> Returns (bool) <p>True if the tile intersects the dataset bounds.</p> method <p>Support using with Context Managers.</p> method <p>Support using with Context Managers.</p> Parameters <ul> <li><code>exc_type</code> \u2014 </li> <li><code>exc_value</code> \u2014 </li> <li><code>traceback</code> \u2014 </li> </ul> method <p>Parse rio-tiler band math expression.</p> Parameters <ul> <li><code>expression</code> (str) \u2014 </li> </ul> method <p>Return metadata from multiple bands.</p> Parameters <ul> <li><code>bands</code> (sequence of str or str, optional) \u2014 band names to fetch info from. Required keyword argument.</li> <li><code>**kwargs</code> (any) \u2014 </li> </ul> Returns (dict) <p>Multiple bands info in form of {\"band1\": rio_tile.models.Info}.</p> method <p>Return array statistics for multiple assets.</p> Parameters <ul> <li><code>bands</code> (sequence of str or str) \u2014 bands to fetch info from. Required keyword argument.</li> <li><code>expression</code> (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3).</li> <li><code>categorical</code> (bool) \u2014 treat input data as categorical data. Defaults to False.</li> <li><code>categories</code> (list of numbers, optional) \u2014 list of categories to return value for.</li> <li><code>percentiles</code> (list of numbers, optional) \u2014 list of percentile values to calculate. Defaults to <code>[2, 98]</code>.</li> <li><code>hist_options</code> (dict, optional) \u2014 Options to forward to numpy.histogram function.</li> <li><code>max_size</code> (int, optional) \u2014 Limit the size of the longest dimension of the dataset read, respecting bounds X/Y aspect ratio. Defaults to 1024.</li> <li><code>**kwargs</code> (any) \u2014 </li> </ul> Returns (dict) <p>Multiple assets statistics in form of {\"{band}/{expression}\": rio_tiler.models.BandStatistics, ...}.</p> method <p>Read and merge Web Map tiles multiple bands.</p> Parameters <ul> <li><code>tile_x</code> (int) \u2014 Tile's horizontal index.</li> <li><code>tile_y</code> (int) \u2014 Tile's vertical index.</li> <li><code>tile_z</code> (int) \u2014 Tile's zoom level index.</li> <li><code>bands</code> (sequence of str or str, optional) \u2014 bands to fetch info from.</li> <li><code>expression</code> (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3).</li> <li><code>**kwargs</code> (any) \u2014 </li> </ul> Returns (rio_tiler.models.ImageData) <p>ImageData instance with data, mask and tile spatial info.</p> method <p>Read and merge parts from multiple bands.</p> Parameters <ul> <li><code>bbox</code> (tuple) \u2014 Output bounds (left, bottom, right, top) in target crs.</li> <li><code>bands</code> (sequence of str or str, optional) \u2014 bands to fetch info from.</li> <li><code>expression</code> (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3).</li> <li><code>**kwargs</code> (any) \u2014 </li> </ul> Returns (rio_tiler.models.ImageData) <p>ImageData instance with data, mask and tile spatial info.</p> method <p>Read and merge previews from multiple bands.</p> Parameters <ul> <li><code>bands</code> (sequence of str or str, optional) \u2014 bands to fetch info from.</li> <li><code>expression</code> (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3).</li> <li><code>**kwargs</code> (any) \u2014 </li> </ul> Returns (rio_tiler.models.ImageData) <p>ImageData instance with data, mask and tile spatial info.</p> method <p>Read a pixel values from multiple bands.</p> Parameters <ul> <li><code>lon</code> (float) \u2014 Longitude.</li> <li><code>lat</code> (float) \u2014 Latitude.</li> <li><code>bands</code> (sequence of str or str, optional) \u2014 bands to fetch info from.</li> <li><code>expression</code> (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3).</li> <li><code>**kwargs</code> (any) \u2014 </li> </ul> Returns (PointData) <p>PointData</p> method <p>Read and merge parts defined by geojson feature from multiple bands.</p> Parameters <ul> <li><code>shape</code> (dict) \u2014 Valid GeoJSON feature.</li> <li><code>bands</code> (sequence of str or str, optional) \u2014 bands to fetch info from.</li> <li><code>expression</code> (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3).</li> <li><code>**kwargs</code> (any) \u2014 </li> </ul> Returns (rio_tiler.models.ImageData) <p>ImageData instance with data, mask and tile spatial info.</p> method <p>Parse Sceneid and get grid bounds.</p>"},{"location":"API/modis/#rio_tiler_pdsmodisawsmodis_astraeamodisreader","title":"<code>rio_tiler_pds.modis.aws.modis_astraea.</code><code>MODISReader</code><code>(</code><code>input</code>, <code>tms=&lt;TileMatrixSet title='Google Maps Compatible for the World' id='WebMercatorQuad' crs='http://www.opengis.net/def/crs/EPSG/0/3857&gt;</code>, <code>minzoom=4</code>, <code>maxzoom=9</code>, <code>reader=&lt;class 'rio_tiler.io.rasterio.Reader'&gt;</code>, <code>reader_options=NOTHING</code>, <code>bucket='astraea-opendata'</code>, <code>prefix_pattern='{product}.{version}/{horizontal_grid}/{vertical_grid}/{date}'</code><code>)</code>","text":""},{"location":"API/modis/#rio_tileriobasespatialmixinget_geographic_bounds_1","title":"<code>get_geographic_bounds</code><code>(</code><code>crs</code><code>)</code> \u2192 (float, float, float, float)","text":""},{"location":"API/modis/#rio_tileriobasespatialmixintile_exists_1","title":"<code>tile_exists</code><code>(</code><code>tile_x</code>, <code>tile_y</code>, <code>tile_z</code><code>)</code>","text":""},{"location":"API/modis/#rio_tileriobasemultibandreaderenter_1","title":"<code>__enter__</code><code>(</code><code>)</code>","text":""},{"location":"API/modis/#rio_tileriobasemultibandreaderexit_1","title":"<code>__exit__</code><code>(</code><code>exc_type</code>, <code>exc_value</code>, <code>traceback</code><code>)</code>","text":""},{"location":"API/modis/#rio_tileriobasemultibandreaderparse_expression_1","title":"<code>parse_expression</code><code>(</code><code>expression</code><code>)</code> \u2192 tuple","text":""},{"location":"API/modis/#rio_tileriobasemultibandreaderinfo_1","title":"<code>info</code><code>(</code><code>bands=None</code>, <code>**kwargs</code><code>)</code>","text":""},{"location":"API/modis/#rio_tileriobasemultibandreaderstatistics_1","title":"<code>statistics</code><code>(</code><code>bands=None</code>, <code>expression=None</code>, <code>categorical=False</code>, <code>categories=None</code>, <code>percentiles=None</code>, <code>hist_options=None</code>, <code>max_size=1024</code>, <code>**kwargs</code><code>)</code>","text":""},{"location":"API/modis/#rio_tileriobasemultibandreadertile_1","title":"<code>tile</code><code>(</code><code>tile_x</code>, <code>tile_y</code>, <code>tile_z</code>, <code>bands=None</code>, <code>expression=None</code>, <code>**kwargs</code><code>)</code>","text":""},{"location":"API/modis/#rio_tileriobasemultibandreaderpart_1","title":"<code>part</code><code>(</code><code>bbox</code>, <code>bands=None</code>, <code>expression=None</code>, <code>**kwargs</code><code>)</code>","text":""},{"location":"API/modis/#rio_tileriobasemultibandreaderpreview_1","title":"<code>preview</code><code>(</code><code>bands=None</code>, <code>expression=None</code>, <code>**kwargs</code><code>)</code>","text":""},{"location":"API/modis/#rio_tileriobasemultibandreaderpoint_1","title":"<code>point</code><code>(</code><code>lon</code>, <code>lat</code>, <code>bands=None</code>, <code>expression=None</code>, <code>**kwargs</code><code>)</code>","text":""},{"location":"API/modis/#rio_tileriobasemultibandreaderfeature_1","title":"<code>feature</code><code>(</code><code>shape</code>, <code>bands=None</code>, <code>expression=None</code>, <code>**kwargs</code><code>)</code>","text":""},{"location":"API/modis/#rio_tiler_pdsmodisawsmodis_astraeamodisreaderattrs_post_init","title":"<code>__attrs_post_init__</code><code>(</code><code>)</code>","text":""},{"location":"API/modis/#utils","title":"Utils","text":"function <p>Parse MODIS scene id.</p> Parameters <ul> <li><code>sceneid</code> (str) \u2014 Sentinel-2 sceneid.</li> </ul> Returns (dict) <p>dictionary with metadata constructed from the sceneid.</p> Raises <ul> <li><code>InvalidMODISSceneId</code> \u2014 If <code>sceneid</code> doesn't match the regex schema.</li> </ul> Examples <pre><code>&gt;&gt;&gt; sceneid_parser('MCD43A4.A2017006.h21v11.006.2017018074804')\n</code></pre>"},{"location":"API/modis/#rio_tiler_pdsmodisutilssceneid_parser","title":"<code>rio_tiler_pds.modis.utils.</code><code>sceneid_parser</code><code>(</code><code>sceneid</code><code>)</code>","text":""},{"location":"API/sentinel/","title":"Readers","text":"module <p>AWS Sentinel 1 reader.</p> Classes <ul> <li><code>S1L1CReader</code> \u2014 AWS Public Dataset Sentinel 1 reader.</li> </ul> Functions <ul> <li><code>get_bounds</code><code>(</code><code>geom</code><code>)</code> (float, float, float, float) \u2014 Get Bounds from GeoJSON geometry and handle multi polygon crossing the antimeridian line.</li> </ul> function <p>Get Bounds from GeoJSON geometry and handle multi polygon crossing the antimeridian line.</p> <p>ref: cogeotiff/rio-tiler-pds#77</p> Parameters <ul> <li><code>geom</code> (dict) \u2014 </li> </ul> class Bases rio_tiler.io.base.MultiBandReader rio_tiler.io.base.SpatialMixin <p>AWS Public Dataset Sentinel 1 reader.</p> Parameters <ul> <li><code>input</code> (str) \u2014 Sentinel-1 sceneid.</li> <li><code>tms</code> (TileMatrixSet, optional) \u2014 </li> <li><code>minzoom</code> (int, optional) \u2014 </li> <li><code>maxzoom</code> (int, optional) \u2014 </li> <li><code>reader</code> (type of Reader, optional) \u2014 </li> <li><code>reader_options</code> (dict, optional) \u2014 </li> <li><code>bucket</code> (str, optional) \u2014 </li> <li><code>prefix_pattern</code> (str, optional) \u2014 </li> </ul> Attributes <ul> <li><code>bands</code> (tuple) \u2014 list of available bands (default is ('vv', 'vh')).</li> <li><code>bounds</code> \u2014 </li> <li><code>crs</code> \u2014 </li> <li><code>datageom</code> (dict) \u2014 sentinel 1 data geometry.</li> <li><code>maxzoom</code> (int) \u2014 Dataset's Max Zoom level (default is 14).</li> <li><code>minzoom</code> (int) \u2014 Dataset's Min Zoom level (default is 8).</li> <li><code>productInfo</code> (dict) \u2014 sentinel 1 productInfo.json content.</li> <li><code>scene_params</code> \u2014 </li> </ul> Examples <pre><code>&gt;&gt;&gt; with S1L1CReader('S1A_IW_GRDH_1SDV_20180716T004042_20180716T004107_022812_02792A_FD5B') as scene:\n        print(scene.bounds)\n</code></pre> Methods <ul> <li><code>__attrs_post_init__</code><code>(</code><code>)</code> \u2014 Fetch productInfo and get bounds.</li> <li><code>__enter__</code><code>(</code><code>)</code> \u2014 Support using with Context Managers.</li> <li><code>__exit__</code><code>(</code><code>exc_type</code>, <code>exc_value</code>, <code>traceback</code><code>)</code> \u2014 Support using with Context Managers.</li> <li><code>feature</code><code>(</code><code>shape</code>, <code>bands</code>, <code>expression</code>, <code>**kwargs</code><code>)</code> (rio_tiler.models.ImageData) \u2014 Read and merge parts defined by geojson feature from multiple bands.</li> <li><code>get_geographic_bounds</code><code>(</code><code>crs</code><code>)</code> (float, float, float, float) \u2014 Return Geographic Bounds for a Geographic CRS.</li> <li><code>info</code><code>(</code><code>bands</code>, <code>**kwargs</code><code>)</code> (dict) \u2014 Return metadata from multiple bands.</li> <li><code>parse_expression</code><code>(</code><code>expression</code><code>)</code> (tuple) \u2014 Parse rio-tiler band math expression.</li> <li><code>part</code><code>(</code><code>bbox</code>, <code>bands</code>, <code>expression</code>, <code>**kwargs</code><code>)</code> (rio_tiler.models.ImageData) \u2014 Read and merge parts from multiple bands.</li> <li><code>point</code><code>(</code><code>lon</code>, <code>lat</code>, <code>bands</code>, <code>expression</code>, <code>**kwargs</code><code>)</code> (PointData) \u2014 Read a pixel values from multiple bands.</li> <li><code>preview</code><code>(</code><code>bands</code>, <code>expression</code>, <code>**kwargs</code><code>)</code> (rio_tiler.models.ImageData) \u2014 Read and merge previews from multiple bands.</li> <li><code>statistics</code><code>(</code><code>bands</code>, <code>expression</code>, <code>categorical</code>, <code>categories</code>, <code>percentiles</code>, <code>hist_options</code>, <code>max_size</code>, <code>**kwargs</code><code>)</code> (dict) \u2014 Return array statistics for multiple assets.</li> <li><code>tile</code><code>(</code><code>tile_x</code>, <code>tile_y</code>, <code>tile_z</code>, <code>bands</code>, <code>expression</code>, <code>**kwargs</code><code>)</code> (rio_tiler.models.ImageData) \u2014 Read and merge Web Map tiles multiple bands.</li> <li><code>tile_exists</code><code>(</code><code>tile_x</code>, <code>tile_y</code>, <code>tile_z</code><code>)</code> (bool) \u2014 Check if a tile intersects the dataset bounds.</li> </ul> method <code>get_geographic_bounds</code><code>(</code><code>crs</code><code>)</code> \u2192 (float, float, float, float) <p>Return Geographic Bounds for a Geographic CRS.</p> Parameters <ul> <li><code>crs</code> (CRS) \u2014 </li> </ul> method <code>tile_exists</code><code>(</code><code>tile_x</code>, <code>tile_y</code>, <code>tile_z</code><code>)</code> <p>Check if a tile intersects the dataset bounds.</p> Parameters <ul> <li><code>tile_x</code> (int) \u2014 Tile's horizontal index.</li> <li><code>tile_y</code> (int) \u2014 Tile's vertical index.</li> <li><code>tile_z</code> (int) \u2014 Tile's zoom level index.</li> </ul> Returns (bool) <p>True if the tile intersects the dataset bounds.</p> method <code>__enter__</code><code>(</code><code>)</code> <p>Support using with Context Managers.</p> method <code>__exit__</code><code>(</code><code>exc_type</code>, <code>exc_value</code>, <code>traceback</code><code>)</code> <p>Support using with Context Managers.</p> Parameters <ul> <li><code>exc_type</code> \u2014 </li> <li><code>exc_value</code> \u2014 </li> <li><code>traceback</code> \u2014 </li> </ul> method <code>parse_expression</code><code>(</code><code>expression</code><code>)</code> \u2192 tuple <p>Parse rio-tiler band math expression.</p> Parameters <ul> <li><code>expression</code> (str) \u2014 </li> </ul> method <code>info</code><code>(</code><code>bands=None</code>, <code>**kwargs</code><code>)</code> <p>Return metadata from multiple bands.</p> Parameters <ul> <li><code>bands</code> (sequence of str or str, optional) \u2014 band names to fetch info from. Required keyword argument.</li> <li><code>**kwargs</code> (any) \u2014 </li> </ul> Returns (dict) <p>Multiple bands info in form of {\"band1\": rio_tile.models.Info}.</p> method <code>statistics</code><code>(</code><code>bands=None</code>, <code>expression=None</code>, <code>categorical=False</code>, <code>categories=None</code>, <code>percentiles=None</code>, <code>hist_options=None</code>, <code>max_size=1024</code>, <code>**kwargs</code><code>)</code> <p>Return array statistics for multiple assets.</p> Parameters <ul> <li><code>bands</code> (sequence of str or str) \u2014 bands to fetch info from. Required keyword argument.</li> <li><code>expression</code> (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3).</li> <li><code>categorical</code> (bool) \u2014 treat input data as categorical data. Defaults to False.</li> <li><code>categories</code> (list of numbers, optional) \u2014 list of categories to return value for.</li> <li><code>percentiles</code> (list of numbers, optional) \u2014 list of percentile values to calculate. Defaults to <code>[2, 98]</code>.</li> <li><code>hist_options</code> (dict, optional) \u2014 Options to forward to numpy.histogram function.</li> <li><code>max_size</code> (int, optional) \u2014 Limit the size of the longest dimension of the dataset read, respecting bounds X/Y aspect ratio. Defaults to 1024.</li> <li><code>**kwargs</code> (any) \u2014 </li> <li><code>kwargs</code> (optional) \u2014 Options to forward to the <code>self.preview</code> method.</li> </ul> Returns (dict) <p>Multiple assets statistics in form of {\"{band}/{expression}\": rio_tiler.models.BandStatistics, ...}.</p> method <code>tile</code><code>(</code><code>tile_x</code>, <code>tile_y</code>, <code>tile_z</code>, <code>bands=None</code>, <code>expression=None</code>, <code>**kwargs</code><code>)</code> <p>Read and merge Web Map tiles multiple bands.</p> Parameters <ul> <li><code>tile_x</code> (int) \u2014 Tile's horizontal index.</li> <li><code>tile_y</code> (int) \u2014 Tile's vertical index.</li> <li><code>tile_z</code> (int) \u2014 Tile's zoom level index.</li> <li><code>bands</code> (sequence of str or str, optional) \u2014 bands to fetch info from.</li> <li><code>expression</code> (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3).</li> <li><code>**kwargs</code> (any) \u2014 </li> <li><code>kwargs</code> (optional) \u2014 Options to forward to the <code>self.reader.tile</code> method.</li> </ul> Returns (rio_tiler.models.ImageData) <p>ImageData instance with data, mask and tile spatial info.</p> method <code>part</code><code>(</code><code>bbox</code>, <code>bands=None</code>, <code>expression=None</code>, <code>**kwargs</code><code>)</code> <p>Read and merge parts from multiple bands.</p> Parameters <ul> <li><code>bbox</code> (tuple) \u2014 Output bounds (left, bottom, right, top) in target crs.</li> <li><code>bands</code> (sequence of str or str, optional) \u2014 bands to fetch info from.</li> <li><code>expression</code> (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3).</li> <li><code>**kwargs</code> (any) \u2014 </li> <li><code>kwargs</code> (optional) \u2014 Options to forward to the 'self.reader.part' method.</li> </ul> Returns (rio_tiler.models.ImageData) <p>ImageData instance with data, mask and tile spatial info.</p> method <code>preview</code><code>(</code><code>bands=None</code>, <code>expression=None</code>, <code>**kwargs</code><code>)</code> <p>Read and merge previews from multiple bands.</p> Parameters <ul> <li><code>bands</code> (sequence of str or str, optional) \u2014 bands to fetch info from.</li> <li><code>expression</code> (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3).</li> <li><code>**kwargs</code> (any) \u2014 </li> <li><code>kwargs</code> (optional) \u2014 Options to forward to the <code>self.reader.preview</code> method.</li> </ul> Returns (rio_tiler.models.ImageData) <p>ImageData instance with data, mask and tile spatial info.</p> method <code>point</code><code>(</code><code>lon</code>, <code>lat</code>, <code>bands=None</code>, <code>expression=None</code>, <code>**kwargs</code><code>)</code> <p>Read a pixel values from multiple bands.</p> Parameters <ul> <li><code>lon</code> (float) \u2014 Longitude.</li> <li><code>lat</code> (float) \u2014 Latitude.</li> <li><code>bands</code> (sequence of str or str, optional) \u2014 bands to fetch info from.</li> <li><code>expression</code> (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3).</li> <li><code>**kwargs</code> (any) \u2014 </li> <li><code>kwargs</code> (optional) \u2014 Options to forward to the <code>self.reader.point</code> method.</li> </ul> Returns (PointData) <p>PointData</p> method <code>feature</code><code>(</code><code>shape</code>, <code>bands=None</code>, <code>expression=None</code>, <code>**kwargs</code><code>)</code> <p>Read and merge parts defined by geojson feature from multiple bands.</p> Parameters <ul> <li><code>shape</code> (dict) \u2014 Valid GeoJSON feature.</li> <li><code>bands</code> (sequence of str or str, optional) \u2014 bands to fetch info from.</li> <li><code>expression</code> (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3).</li> <li><code>**kwargs</code> (any) \u2014 </li> <li><code>kwargs</code> (optional) \u2014 Options to forward to the <code>self.reader.feature</code> method.</li> </ul> Returns (rio_tiler.models.ImageData) <p>ImageData instance with data, mask and tile spatial info.</p> method <code>__attrs_post_init__</code><code>(</code><code>)</code> <p>Fetch productInfo and get bounds.</p> module <p>AWS Sentinel 2 readers.</p> Attributes <ul> <li><code>SENTINEL_L2_BANDS</code> \u2014 </li> <li><code>SENTINEL_L2_PRODUCTS</code> \u2014 </li> <li><code>default_l1c_bands</code> \u2014 </li> <li><code>default_l2a_bands</code> \u2014 </li> <li><code>sentinel_l2a_band_map</code> \u2014 </li> </ul> Classes <ul> <li><code>S2L1CReader</code> \u2014 AWS Public Dataset Sentinel 2 L1C reader.</li> <li><code>S2L2AReader</code> \u2014 AWS Public Dataset Sentinel 2 L2A reader.</li> <li><code>S2L2ACOGReader</code> \u2014 AWS Public Dataset Sentinel 2 L2A COGS reader.</li> </ul> Functions <ul> <li><code>S2COGReader</code><code>(</code><code>sceneid</code>, <code>**kwargs</code><code>)</code> (S2L2ACOGReader) \u2014 Sentinel-2 COG readers.</li> <li><code>S2JP2Reader</code><code>(</code><code>sceneid</code>, <code>**kwargs</code><code>)</code> (S2L2AReader or S2L1CReader) \u2014 Sentinel-2 JPEG2000 readers.</li> </ul> class Bases rio_tiler.io.base.MultiBandReader rio_tiler.io.base.SpatialMixin <p>AWS Public Dataset Sentinel 2 L1C reader.</p> Parameters <ul> <li><code>input</code> (str) \u2014 Sentinel-2 L1C sceneid.</li> <li><code>tms</code> (TileMatrixSet, optional) \u2014 </li> <li><code>minzoom</code> (int, optional) \u2014 </li> <li><code>maxzoom</code> (int, optional) \u2014 </li> <li><code>reader</code> (type of Reader, optional) \u2014 </li> <li><code>reader_options</code> (dict, optional) \u2014 </li> <li><code>bucket</code> (str, optional) \u2014 </li> <li><code>prefix_pattern</code> (str, optional) \u2014 </li> </ul> Attributes <ul> <li><code>bands</code> (tuple) \u2014 list of available bands (default is ('B01', 'B02', 'B03', 'B04', 'B05', 'B06', 'B07', 'B08', 'B09', 'B11', 'B12', 'B8A')).</li> <li><code>bounds</code> \u2014 </li> <li><code>crs</code> \u2014 </li> <li><code>datageom</code> (dict) \u2014 sentinel 2 data geometry.</li> <li><code>maxzoom</code> (int) \u2014 Dataset's Max Zoom level (default is 14).</li> <li><code>minzoom</code> (int) \u2014 Dataset's Min Zoom level (default is 8).</li> <li><code>scene_params</code> (dict) \u2014 scene id parameters.</li> <li><code>tileInfo</code> (dict) \u2014 sentinel 2 tileInfo.json content.</li> </ul> Examples <pre><code>&gt;&gt;&gt; with S2L1CReader('S2A_L1C_20170729_19UDP_0') as scene:\n        print(scene.bounds)\n</code></pre> Methods <ul> <li><code>__attrs_post_init__</code><code>(</code><code>)</code> \u2014 Fetch productInfo and get bounds.</li> <li><code>__enter__</code><code>(</code><code>)</code> \u2014 Support using with Context Managers.</li> <li><code>__exit__</code><code>(</code><code>exc_type</code>, <code>exc_value</code>, <code>traceback</code><code>)</code> \u2014 Support using with Context Managers.</li> <li><code>feature</code><code>(</code><code>shape</code>, <code>bands</code>, <code>expression</code>, <code>**kwargs</code><code>)</code> (rio_tiler.models.ImageData) \u2014 Read and merge parts defined by geojson feature from multiple bands.</li> <li><code>get_geographic_bounds</code><code>(</code><code>crs</code><code>)</code> (float, float, float, float) \u2014 Return Geographic Bounds for a Geographic CRS.</li> <li><code>info</code><code>(</code><code>bands</code>, <code>**kwargs</code><code>)</code> (dict) \u2014 Return metadata from multiple bands.</li> <li><code>parse_expression</code><code>(</code><code>expression</code><code>)</code> (tuple) \u2014 Parse rio-tiler band math expression.</li> <li><code>part</code><code>(</code><code>bbox</code>, <code>bands</code>, <code>expression</code>, <code>**kwargs</code><code>)</code> (rio_tiler.models.ImageData) \u2014 Read and merge parts from multiple bands.</li> <li><code>point</code><code>(</code><code>lon</code>, <code>lat</code>, <code>bands</code>, <code>expression</code>, <code>**kwargs</code><code>)</code> (PointData) \u2014 Read a pixel values from multiple bands.</li> <li><code>preview</code><code>(</code><code>bands</code>, <code>expression</code>, <code>**kwargs</code><code>)</code> (rio_tiler.models.ImageData) \u2014 Read and merge previews from multiple bands.</li> <li><code>statistics</code><code>(</code><code>bands</code>, <code>expression</code>, <code>categorical</code>, <code>categories</code>, <code>percentiles</code>, <code>hist_options</code>, <code>max_size</code>, <code>**kwargs</code><code>)</code> (dict) \u2014 Return array statistics for multiple assets.</li> <li><code>tile</code><code>(</code><code>tile_x</code>, <code>tile_y</code>, <code>tile_z</code>, <code>bands</code>, <code>expression</code>, <code>**kwargs</code><code>)</code> (rio_tiler.models.ImageData) \u2014 Read and merge Web Map tiles multiple bands.</li> <li><code>tile_exists</code><code>(</code><code>tile_x</code>, <code>tile_y</code>, <code>tile_z</code><code>)</code> (bool) \u2014 Check if a tile intersects the dataset bounds.</li> </ul> method <code>get_geographic_bounds</code><code>(</code><code>crs</code><code>)</code> \u2192 (float, float, float, float) <p>Return Geographic Bounds for a Geographic CRS.</p> Parameters <ul> <li><code>crs</code> (CRS) \u2014 </li> </ul> method <code>tile_exists</code><code>(</code><code>tile_x</code>, <code>tile_y</code>, <code>tile_z</code><code>)</code> <p>Check if a tile intersects the dataset bounds.</p> Parameters <ul> <li><code>tile_x</code> (int) \u2014 Tile's horizontal index.</li> <li><code>tile_y</code> (int) \u2014 Tile's vertical index.</li> <li><code>tile_z</code> (int) \u2014 Tile's zoom level index.</li> </ul> Returns (bool) <p>True if the tile intersects the dataset bounds.</p> method <code>__enter__</code><code>(</code><code>)</code> <p>Support using with Context Managers.</p> method <code>__exit__</code><code>(</code><code>exc_type</code>, <code>exc_value</code>, <code>traceback</code><code>)</code> <p>Support using with Context Managers.</p> Parameters <ul> <li><code>exc_type</code> \u2014 </li> <li><code>exc_value</code> \u2014 </li> <li><code>traceback</code> \u2014 </li> </ul> method <code>parse_expression</code><code>(</code><code>expression</code><code>)</code> \u2192 tuple <p>Parse rio-tiler band math expression.</p> Parameters <ul> <li><code>expression</code> (str) \u2014 </li> </ul> method <code>info</code><code>(</code><code>bands=None</code>, <code>**kwargs</code><code>)</code> <p>Return metadata from multiple bands.</p> Parameters <ul> <li><code>bands</code> (sequence of str or str, optional) \u2014 band names to fetch info from. Required keyword argument.</li> <li><code>**kwargs</code> (any) \u2014 </li> </ul> Returns (dict) <p>Multiple bands info in form of {\"band1\": rio_tile.models.Info}.</p> method <code>statistics</code><code>(</code><code>bands=None</code>, <code>expression=None</code>, <code>categorical=False</code>, <code>categories=None</code>, <code>percentiles=None</code>, <code>hist_options=None</code>, <code>max_size=1024</code>, <code>**kwargs</code><code>)</code> <p>Return array statistics for multiple assets.</p> Parameters <ul> <li><code>bands</code> (sequence of str or str) \u2014 bands to fetch info from. Required keyword argument.</li> <li><code>expression</code> (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3).</li> <li><code>categorical</code> (bool) \u2014 treat input data as categorical data. Defaults to False.</li> <li><code>categories</code> (list of numbers, optional) \u2014 list of categories to return value for.</li> <li><code>percentiles</code> (list of numbers, optional) \u2014 list of percentile values to calculate. Defaults to <code>[2, 98]</code>.</li> <li><code>hist_options</code> (dict, optional) \u2014 Options to forward to numpy.histogram function.</li> <li><code>max_size</code> (int, optional) \u2014 Limit the size of the longest dimension of the dataset read, respecting bounds X/Y aspect ratio. Defaults to 1024.</li> <li><code>**kwargs</code> (any) \u2014 </li> <li><code>kwargs</code> (optional) \u2014 Options to forward to the <code>self.preview</code> method.</li> </ul> Returns (dict) <p>Multiple assets statistics in form of {\"{band}/{expression}\": rio_tiler.models.BandStatistics, ...}.</p> method <code>tile</code><code>(</code><code>tile_x</code>, <code>tile_y</code>, <code>tile_z</code>, <code>bands=None</code>, <code>expression=None</code>, <code>**kwargs</code><code>)</code> <p>Read and merge Web Map tiles multiple bands.</p> Parameters <ul> <li><code>tile_x</code> (int) \u2014 Tile's horizontal index.</li> <li><code>tile_y</code> (int) \u2014 Tile's vertical index.</li> <li><code>tile_z</code> (int) \u2014 Tile's zoom level index.</li> <li><code>bands</code> (sequence of str or str, optional) \u2014 bands to fetch info from.</li> <li><code>expression</code> (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3).</li> <li><code>**kwargs</code> (any) \u2014 </li> <li><code>kwargs</code> (optional) \u2014 Options to forward to the <code>self.reader.tile</code> method.</li> </ul> Returns (rio_tiler.models.ImageData) <p>ImageData instance with data, mask and tile spatial info.</p> method <code>part</code><code>(</code><code>bbox</code>, <code>bands=None</code>, <code>expression=None</code>, <code>**kwargs</code><code>)</code> <p>Read and merge parts from multiple bands.</p> Parameters <ul> <li><code>bbox</code> (tuple) \u2014 Output bounds (left, bottom, right, top) in target crs.</li> <li><code>bands</code> (sequence of str or str, optional) \u2014 bands to fetch info from.</li> <li><code>expression</code> (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3).</li> <li><code>**kwargs</code> (any) \u2014 </li> <li><code>kwargs</code> (optional) \u2014 Options to forward to the 'self.reader.part' method.</li> </ul> Returns (rio_tiler.models.ImageData) <p>ImageData instance with data, mask and tile spatial info.</p> method <code>preview</code><code>(</code><code>bands=None</code>, <code>expression=None</code>, <code>**kwargs</code><code>)</code> <p>Read and merge previews from multiple bands.</p> Parameters <ul> <li><code>bands</code> (sequence of str or str, optional) \u2014 bands to fetch info from.</li> <li><code>expression</code> (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3).</li> <li><code>**kwargs</code> (any) \u2014 </li> <li><code>kwargs</code> (optional) \u2014 Options to forward to the <code>self.reader.preview</code> method.</li> </ul> Returns (rio_tiler.models.ImageData) <p>ImageData instance with data, mask and tile spatial info.</p> method <code>point</code><code>(</code><code>lon</code>, <code>lat</code>, <code>bands=None</code>, <code>expression=None</code>, <code>**kwargs</code><code>)</code> <p>Read a pixel values from multiple bands.</p> Parameters <ul> <li><code>lon</code> (float) \u2014 Longitude.</li> <li><code>lat</code> (float) \u2014 Latitude.</li> <li><code>bands</code> (sequence of str or str, optional) \u2014 bands to fetch info from.</li> <li><code>expression</code> (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3).</li> <li><code>**kwargs</code> (any) \u2014 </li> <li><code>kwargs</code> (optional) \u2014 Options to forward to the <code>self.reader.point</code> method.</li> </ul> Returns (PointData) <p>PointData</p> method <code>feature</code><code>(</code><code>shape</code>, <code>bands=None</code>, <code>expression=None</code>, <code>**kwargs</code><code>)</code> <p>Read and merge parts defined by geojson feature from multiple bands.</p> Parameters <ul> <li><code>shape</code> (dict) \u2014 Valid GeoJSON feature.</li> <li><code>bands</code> (sequence of str or str, optional) \u2014 bands to fetch info from.</li> <li><code>expression</code> (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3).</li> <li><code>**kwargs</code> (any) \u2014 </li> <li><code>kwargs</code> (optional) \u2014 Options to forward to the <code>self.reader.feature</code> method.</li> </ul> Returns (rio_tiler.models.ImageData) <p>ImageData instance with data, mask and tile spatial info.</p> method <code>__attrs_post_init__</code><code>(</code><code>)</code> <p>Fetch productInfo and get bounds.</p> class Bases rio_tiler_pds.sentinel.aws.sentinel2.S2L1CReader rio_tiler.io.base.MultiBandReader rio_tiler.io.base.SpatialMixin <p>AWS Public Dataset Sentinel 2 L2A reader.</p> Parameters <ul> <li><code>input</code> (str) \u2014 Sentinel-2 L2A sceneid.</li> <li><code>tms</code> (TileMatrixSet, optional) \u2014 </li> <li><code>minzoom</code> (int, optional) \u2014 </li> <li><code>maxzoom</code> (int, optional) \u2014 </li> <li><code>reader</code> (type of Reader, optional) \u2014 </li> <li><code>reader_options</code> (dict, optional) \u2014 </li> <li><code>bucket</code> (str, optional) \u2014 </li> <li><code>prefix_pattern</code> (str, optional) \u2014 </li> </ul> Attributes <ul> <li><code>bands</code> (tuple) \u2014 list of available bands (default is ('B01', 'B02', 'B03', 'B04', 'B05', 'B06', 'B07', 'B08', 'B09', 'B11', 'B12', 'B8A')).</li> </ul> Examples <pre><code>&gt;&gt;&gt; with S2L1CReader('S2A_L1C_20170729_19UDP_0') as scene:\n        print(scene.bounds)\n</code></pre> Methods <ul> <li><code>__attrs_post_init__</code><code>(</code><code>)</code> \u2014 Fetch productInfo and get bounds.</li> <li><code>__enter__</code><code>(</code><code>)</code> \u2014 Support using with Context Managers.</li> <li><code>__exit__</code><code>(</code><code>exc_type</code>, <code>exc_value</code>, <code>traceback</code><code>)</code> \u2014 Support using with Context Managers.</li> <li><code>feature</code><code>(</code><code>shape</code>, <code>bands</code>, <code>expression</code>, <code>**kwargs</code><code>)</code> (rio_tiler.models.ImageData) \u2014 Read and merge parts defined by geojson feature from multiple bands.</li> <li><code>get_geographic_bounds</code><code>(</code><code>crs</code><code>)</code> (float, float, float, float) \u2014 Return Geographic Bounds for a Geographic CRS.</li> <li><code>info</code><code>(</code><code>bands</code>, <code>**kwargs</code><code>)</code> (dict) \u2014 Return metadata from multiple bands.</li> <li><code>parse_expression</code><code>(</code><code>expression</code><code>)</code> (tuple) \u2014 Parse rio-tiler band math expression.</li> <li><code>part</code><code>(</code><code>bbox</code>, <code>bands</code>, <code>expression</code>, <code>**kwargs</code><code>)</code> (rio_tiler.models.ImageData) \u2014 Read and merge parts from multiple bands.</li> <li><code>point</code><code>(</code><code>lon</code>, <code>lat</code>, <code>bands</code>, <code>expression</code>, <code>**kwargs</code><code>)</code> (PointData) \u2014 Read a pixel values from multiple bands.</li> <li><code>preview</code><code>(</code><code>bands</code>, <code>expression</code>, <code>**kwargs</code><code>)</code> (rio_tiler.models.ImageData) \u2014 Read and merge previews from multiple bands.</li> <li><code>statistics</code><code>(</code><code>bands</code>, <code>expression</code>, <code>categorical</code>, <code>categories</code>, <code>percentiles</code>, <code>hist_options</code>, <code>max_size</code>, <code>**kwargs</code><code>)</code> (dict) \u2014 Return array statistics for multiple assets.</li> <li><code>tile</code><code>(</code><code>tile_x</code>, <code>tile_y</code>, <code>tile_z</code>, <code>bands</code>, <code>expression</code>, <code>**kwargs</code><code>)</code> (rio_tiler.models.ImageData) \u2014 Read and merge Web Map tiles multiple bands.</li> <li><code>tile_exists</code><code>(</code><code>tile_x</code>, <code>tile_y</code>, <code>tile_z</code><code>)</code> (bool) \u2014 Check if a tile intersects the dataset bounds.</li> </ul> method <code>get_geographic_bounds</code><code>(</code><code>crs</code><code>)</code> \u2192 (float, float, float, float) <p>Return Geographic Bounds for a Geographic CRS.</p> Parameters <ul> <li><code>crs</code> (CRS) \u2014 </li> </ul> method <code>tile_exists</code><code>(</code><code>tile_x</code>, <code>tile_y</code>, <code>tile_z</code><code>)</code> <p>Check if a tile intersects the dataset bounds.</p> Parameters <ul> <li><code>tile_x</code> (int) \u2014 Tile's horizontal index.</li> <li><code>tile_y</code> (int) \u2014 Tile's vertical index.</li> <li><code>tile_z</code> (int) \u2014 Tile's zoom level index.</li> </ul> Returns (bool) <p>True if the tile intersects the dataset bounds.</p> method <code>__enter__</code><code>(</code><code>)</code> <p>Support using with Context Managers.</p> method <code>__exit__</code><code>(</code><code>exc_type</code>, <code>exc_value</code>, <code>traceback</code><code>)</code> <p>Support using with Context Managers.</p> Parameters <ul> <li><code>exc_type</code> \u2014 </li> <li><code>exc_value</code> \u2014 </li> <li><code>traceback</code> \u2014 </li> </ul> method <code>parse_expression</code><code>(</code><code>expression</code><code>)</code> \u2192 tuple <p>Parse rio-tiler band math expression.</p> Parameters <ul> <li><code>expression</code> (str) \u2014 </li> </ul> method <code>info</code><code>(</code><code>bands=None</code>, <code>**kwargs</code><code>)</code> <p>Return metadata from multiple bands.</p> Parameters <ul> <li><code>bands</code> (sequence of str or str, optional) \u2014 band names to fetch info from. Required keyword argument.</li> <li><code>**kwargs</code> (any) \u2014 </li> </ul> Returns (dict) <p>Multiple bands info in form of {\"band1\": rio_tile.models.Info}.</p> method <code>statistics</code><code>(</code><code>bands=None</code>, <code>expression=None</code>, <code>categorical=False</code>, <code>categories=None</code>, <code>percentiles=None</code>, <code>hist_options=None</code>, <code>max_size=1024</code>, <code>**kwargs</code><code>)</code> <p>Return array statistics for multiple assets.</p> Parameters <ul> <li><code>bands</code> (sequence of str or str) \u2014 bands to fetch info from. Required keyword argument.</li> <li><code>expression</code> (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3).</li> <li><code>categorical</code> (bool) \u2014 treat input data as categorical data. Defaults to False.</li> <li><code>categories</code> (list of numbers, optional) \u2014 list of categories to return value for.</li> <li><code>percentiles</code> (list of numbers, optional) \u2014 list of percentile values to calculate. Defaults to <code>[2, 98]</code>.</li> <li><code>hist_options</code> (dict, optional) \u2014 Options to forward to numpy.histogram function.</li> <li><code>max_size</code> (int, optional) \u2014 Limit the size of the longest dimension of the dataset read, respecting bounds X/Y aspect ratio. Defaults to 1024.</li> <li><code>**kwargs</code> (any) \u2014 </li> <li><code>kwargs</code> (optional) \u2014 Options to forward to the <code>self.preview</code> method.</li> </ul> Returns (dict) <p>Multiple assets statistics in form of {\"{band}/{expression}\": rio_tiler.models.BandStatistics, ...}.</p> method <code>tile</code><code>(</code><code>tile_x</code>, <code>tile_y</code>, <code>tile_z</code>, <code>bands=None</code>, <code>expression=None</code>, <code>**kwargs</code><code>)</code> <p>Read and merge Web Map tiles multiple bands.</p> Parameters <ul> <li><code>tile_x</code> (int) \u2014 Tile's horizontal index.</li> <li><code>tile_y</code> (int) \u2014 Tile's vertical index.</li> <li><code>tile_z</code> (int) \u2014 Tile's zoom level index.</li> <li><code>bands</code> (sequence of str or str, optional) \u2014 bands to fetch info from.</li> <li><code>expression</code> (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3).</li> <li><code>**kwargs</code> (any) \u2014 </li> <li><code>kwargs</code> (optional) \u2014 Options to forward to the <code>self.reader.tile</code> method.</li> </ul> Returns (rio_tiler.models.ImageData) <p>ImageData instance with data, mask and tile spatial info.</p> method <code>part</code><code>(</code><code>bbox</code>, <code>bands=None</code>, <code>expression=None</code>, <code>**kwargs</code><code>)</code> <p>Read and merge parts from multiple bands.</p> Parameters <ul> <li><code>bbox</code> (tuple) \u2014 Output bounds (left, bottom, right, top) in target crs.</li> <li><code>bands</code> (sequence of str or str, optional) \u2014 bands to fetch info from.</li> <li><code>expression</code> (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3).</li> <li><code>**kwargs</code> (any) \u2014 </li> <li><code>kwargs</code> (optional) \u2014 Options to forward to the 'self.reader.part' method.</li> </ul> Returns (rio_tiler.models.ImageData) <p>ImageData instance with data, mask and tile spatial info.</p> method <code>preview</code><code>(</code><code>bands=None</code>, <code>expression=None</code>, <code>**kwargs</code><code>)</code> <p>Read and merge previews from multiple bands.</p> Parameters <ul> <li><code>bands</code> (sequence of str or str, optional) \u2014 bands to fetch info from.</li> <li><code>expression</code> (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3).</li> <li><code>**kwargs</code> (any) \u2014 </li> <li><code>kwargs</code> (optional) \u2014 Options to forward to the <code>self.reader.preview</code> method.</li> </ul> Returns (rio_tiler.models.ImageData) <p>ImageData instance with data, mask and tile spatial info.</p> method <code>point</code><code>(</code><code>lon</code>, <code>lat</code>, <code>bands=None</code>, <code>expression=None</code>, <code>**kwargs</code><code>)</code> <p>Read a pixel values from multiple bands.</p> Parameters <ul> <li><code>lon</code> (float) \u2014 Longitude.</li> <li><code>lat</code> (float) \u2014 Latitude.</li> <li><code>bands</code> (sequence of str or str, optional) \u2014 bands to fetch info from.</li> <li><code>expression</code> (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3).</li> <li><code>**kwargs</code> (any) \u2014 </li> <li><code>kwargs</code> (optional) \u2014 Options to forward to the <code>self.reader.point</code> method.</li> </ul> Returns (PointData) <p>PointData</p> method <code>feature</code><code>(</code><code>shape</code>, <code>bands=None</code>, <code>expression=None</code>, <code>**kwargs</code><code>)</code> <p>Read and merge parts defined by geojson feature from multiple bands.</p> Parameters <ul> <li><code>shape</code> (dict) \u2014 Valid GeoJSON feature.</li> <li><code>bands</code> (sequence of str or str, optional) \u2014 bands to fetch info from.</li> <li><code>expression</code> (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3).</li> <li><code>**kwargs</code> (any) \u2014 </li> <li><code>kwargs</code> (optional) \u2014 Options to forward to the <code>self.reader.feature</code> method.</li> </ul> Returns (rio_tiler.models.ImageData) <p>ImageData instance with data, mask and tile spatial info.</p> method <code>__attrs_post_init__</code><code>(</code><code>)</code> <p>Fetch productInfo and get bounds.</p> class Bases rio_tiler.io.base.MultiBandReader rio_tiler.io.base.SpatialMixin <p>AWS Public Dataset Sentinel 2 L2A COGS reader.</p> Parameters <ul> <li><code>input</code> (str) \u2014 Sentinel-2 sceneid.</li> <li><code>tms</code> (TileMatrixSet, optional) \u2014 </li> <li><code>minzoom</code> (int, optional) \u2014 </li> <li><code>maxzoom</code> (int, optional) \u2014 </li> <li><code>reader</code> (type of Reader, optional) \u2014 </li> <li><code>reader_options</code> (dict, optional) \u2014 </li> <li><code>bucket</code> (str, optional) \u2014 </li> <li><code>prefix_pattern</code> (str, optional) \u2014 </li> </ul> Attributes <ul> <li><code>bands</code> (tuple) \u2014 list of available bands (defined by the STAC item.json).</li> <li><code>bounds</code> \u2014 </li> <li><code>crs</code> \u2014 </li> <li><code>maxzoom</code> (int) \u2014 Dataset's Max Zoom level (default is 14).</li> <li><code>minzoom</code> (int) \u2014 Dataset's Min Zoom level (default is 8).</li> <li><code>scene_params</code> (dict) \u2014 scene id parameters.</li> <li><code>stac_item</code> (dict) \u2014 sentinel 2 COG STAC item content.</li> </ul> Examples <pre><code>&gt;&gt;&gt; with S2L2ACOGReader('S2A_29RKH_20200219_0_L2A') as scene:\n        print(scene.bounds)\n</code></pre> Methods <ul> <li><code>__attrs_post_init__</code><code>(</code><code>)</code> \u2014 Fetch item.json and get bounds and bands.</li> <li><code>__enter__</code><code>(</code><code>)</code> \u2014 Support using with Context Managers.</li> <li><code>__exit__</code><code>(</code><code>exc_type</code>, <code>exc_value</code>, <code>traceback</code><code>)</code> \u2014 Support using with Context Managers.</li> <li><code>feature</code><code>(</code><code>shape</code>, <code>bands</code>, <code>expression</code>, <code>**kwargs</code><code>)</code> (rio_tiler.models.ImageData) \u2014 Read and merge parts defined by geojson feature from multiple bands.</li> <li><code>get_geographic_bounds</code><code>(</code><code>crs</code><code>)</code> (float, float, float, float) \u2014 Return Geographic Bounds for a Geographic CRS.</li> <li><code>info</code><code>(</code><code>bands</code>, <code>**kwargs</code><code>)</code> (dict) \u2014 Return metadata from multiple bands.</li> <li><code>parse_expression</code><code>(</code><code>expression</code><code>)</code> (tuple) \u2014 Parse rio-tiler band math expression.</li> <li><code>part</code><code>(</code><code>bbox</code>, <code>bands</code>, <code>expression</code>, <code>**kwargs</code><code>)</code> (rio_tiler.models.ImageData) \u2014 Read and merge parts from multiple bands.</li> <li><code>point</code><code>(</code><code>lon</code>, <code>lat</code>, <code>bands</code>, <code>expression</code>, <code>**kwargs</code><code>)</code> (PointData) \u2014 Read a pixel values from multiple bands.</li> <li><code>preview</code><code>(</code><code>bands</code>, <code>expression</code>, <code>**kwargs</code><code>)</code> (rio_tiler.models.ImageData) \u2014 Read and merge previews from multiple bands.</li> <li><code>statistics</code><code>(</code><code>bands</code>, <code>expression</code>, <code>categorical</code>, <code>categories</code>, <code>percentiles</code>, <code>hist_options</code>, <code>max_size</code>, <code>**kwargs</code><code>)</code> (dict) \u2014 Return array statistics for multiple assets.</li> <li><code>tile</code><code>(</code><code>tile_x</code>, <code>tile_y</code>, <code>tile_z</code>, <code>bands</code>, <code>expression</code>, <code>**kwargs</code><code>)</code> (rio_tiler.models.ImageData) \u2014 Read and merge Web Map tiles multiple bands.</li> <li><code>tile_exists</code><code>(</code><code>tile_x</code>, <code>tile_y</code>, <code>tile_z</code><code>)</code> (bool) \u2014 Check if a tile intersects the dataset bounds.</li> </ul> method <code>get_geographic_bounds</code><code>(</code><code>crs</code><code>)</code> \u2192 (float, float, float, float) <p>Return Geographic Bounds for a Geographic CRS.</p> Parameters <ul> <li><code>crs</code> (CRS) \u2014 </li> </ul> method <code>tile_exists</code><code>(</code><code>tile_x</code>, <code>tile_y</code>, <code>tile_z</code><code>)</code> <p>Check if a tile intersects the dataset bounds.</p> Parameters <ul> <li><code>tile_x</code> (int) \u2014 Tile's horizontal index.</li> <li><code>tile_y</code> (int) \u2014 Tile's vertical index.</li> <li><code>tile_z</code> (int) \u2014 Tile's zoom level index.</li> </ul> Returns (bool) <p>True if the tile intersects the dataset bounds.</p> method <code>__enter__</code><code>(</code><code>)</code> <p>Support using with Context Managers.</p> method <code>__exit__</code><code>(</code><code>exc_type</code>, <code>exc_value</code>, <code>traceback</code><code>)</code> <p>Support using with Context Managers.</p> Parameters <ul> <li><code>exc_type</code> \u2014 </li> <li><code>exc_value</code> \u2014 </li> <li><code>traceback</code> \u2014 </li> </ul> method <code>parse_expression</code><code>(</code><code>expression</code><code>)</code> \u2192 tuple <p>Parse rio-tiler band math expression.</p> Parameters <ul> <li><code>expression</code> (str) \u2014 </li> </ul> method <code>info</code><code>(</code><code>bands=None</code>, <code>**kwargs</code><code>)</code> <p>Return metadata from multiple bands.</p> Parameters <ul> <li><code>bands</code> (sequence of str or str, optional) \u2014 band names to fetch info from. Required keyword argument.</li> <li><code>**kwargs</code> (any) \u2014 </li> </ul> Returns (dict) <p>Multiple bands info in form of {\"band1\": rio_tile.models.Info}.</p> method <code>statistics</code><code>(</code><code>bands=None</code>, <code>expression=None</code>, <code>categorical=False</code>, <code>categories=None</code>, <code>percentiles=None</code>, <code>hist_options=None</code>, <code>max_size=1024</code>, <code>**kwargs</code><code>)</code> <p>Return array statistics for multiple assets.</p> Parameters <ul> <li><code>bands</code> (sequence of str or str) \u2014 bands to fetch info from. Required keyword argument.</li> <li><code>expression</code> (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3).</li> <li><code>categorical</code> (bool) \u2014 treat input data as categorical data. Defaults to False.</li> <li><code>categories</code> (list of numbers, optional) \u2014 list of categories to return value for.</li> <li><code>percentiles</code> (list of numbers, optional) \u2014 list of percentile values to calculate. Defaults to <code>[2, 98]</code>.</li> <li><code>hist_options</code> (dict, optional) \u2014 Options to forward to numpy.histogram function.</li> <li><code>max_size</code> (int, optional) \u2014 Limit the size of the longest dimension of the dataset read, respecting bounds X/Y aspect ratio. Defaults to 1024.</li> <li><code>**kwargs</code> (any) \u2014 </li> <li><code>kwargs</code> (optional) \u2014 Options to forward to the <code>self.preview</code> method.</li> </ul> Returns (dict) <p>Multiple assets statistics in form of {\"{band}/{expression}\": rio_tiler.models.BandStatistics, ...}.</p> method <code>tile</code><code>(</code><code>tile_x</code>, <code>tile_y</code>, <code>tile_z</code>, <code>bands=None</code>, <code>expression=None</code>, <code>**kwargs</code><code>)</code> <p>Read and merge Web Map tiles multiple bands.</p> Parameters <ul> <li><code>tile_x</code> (int) \u2014 Tile's horizontal index.</li> <li><code>tile_y</code> (int) \u2014 Tile's vertical index.</li> <li><code>tile_z</code> (int) \u2014 Tile's zoom level index.</li> <li><code>bands</code> (sequence of str or str, optional) \u2014 bands to fetch info from.</li> <li><code>expression</code> (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3).</li> <li><code>**kwargs</code> (any) \u2014 </li> <li><code>kwargs</code> (optional) \u2014 Options to forward to the <code>self.reader.tile</code> method.</li> </ul> Returns (rio_tiler.models.ImageData) <p>ImageData instance with data, mask and tile spatial info.</p> method <code>part</code><code>(</code><code>bbox</code>, <code>bands=None</code>, <code>expression=None</code>, <code>**kwargs</code><code>)</code> <p>Read and merge parts from multiple bands.</p> Parameters <ul> <li><code>bbox</code> (tuple) \u2014 Output bounds (left, bottom, right, top) in target crs.</li> <li><code>bands</code> (sequence of str or str, optional) \u2014 bands to fetch info from.</li> <li><code>expression</code> (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3).</li> <li><code>**kwargs</code> (any) \u2014 </li> <li><code>kwargs</code> (optional) \u2014 Options to forward to the 'self.reader.part' method.</li> </ul> Returns (rio_tiler.models.ImageData) <p>ImageData instance with data, mask and tile spatial info.</p> method <code>preview</code><code>(</code><code>bands=None</code>, <code>expression=None</code>, <code>**kwargs</code><code>)</code> <p>Read and merge previews from multiple bands.</p> Parameters <ul> <li><code>bands</code> (sequence of str or str, optional) \u2014 bands to fetch info from.</li> <li><code>expression</code> (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3).</li> <li><code>**kwargs</code> (any) \u2014 </li> <li><code>kwargs</code> (optional) \u2014 Options to forward to the <code>self.reader.preview</code> method.</li> </ul> Returns (rio_tiler.models.ImageData) <p>ImageData instance with data, mask and tile spatial info.</p> method <code>point</code><code>(</code><code>lon</code>, <code>lat</code>, <code>bands=None</code>, <code>expression=None</code>, <code>**kwargs</code><code>)</code> <p>Read a pixel values from multiple bands.</p> Parameters <ul> <li><code>lon</code> (float) \u2014 Longitude.</li> <li><code>lat</code> (float) \u2014 Latitude.</li> <li><code>bands</code> (sequence of str or str, optional) \u2014 bands to fetch info from.</li> <li><code>expression</code> (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3).</li> <li><code>**kwargs</code> (any) \u2014 </li> <li><code>kwargs</code> (optional) \u2014 Options to forward to the <code>self.reader.point</code> method.</li> </ul> Returns (PointData) <p>PointData</p> method <code>feature</code><code>(</code><code>shape</code>, <code>bands=None</code>, <code>expression=None</code>, <code>**kwargs</code><code>)</code> <p>Read and merge parts defined by geojson feature from multiple bands.</p> Parameters <ul> <li><code>shape</code> (dict) \u2014 Valid GeoJSON feature.</li> <li><code>bands</code> (sequence of str or str, optional) \u2014 bands to fetch info from.</li> <li><code>expression</code> (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3).</li> <li><code>**kwargs</code> (any) \u2014 </li> <li><code>kwargs</code> (optional) \u2014 Options to forward to the <code>self.reader.feature</code> method.</li> </ul> Returns (rio_tiler.models.ImageData) <p>ImageData instance with data, mask and tile spatial info.</p> method <code>__attrs_post_init__</code><code>(</code><code>)</code> <p>Fetch item.json and get bounds and bands.</p> function <p>Sentinel-2 COG readers.</p> Parameters <ul> <li><code>sceneid</code> (str) \u2014 </li> <li><code>**kwargs</code> (any) \u2014 </li> </ul> function <p>Sentinel-2 JPEG2000 readers.</p> Parameters <ul> <li><code>sceneid</code> (str) \u2014 </li> <li><code>**kwargs</code> (any) \u2014 </li> </ul>"},{"location":"API/sentinel/#rio_tiler_pdssentinelawssentinel1","title":"rio_tiler_pds.sentinel.aws.sentinel1","text":""},{"location":"API/sentinel/#rio_tiler_pdssentinelawssentinel1get_bounds","title":"<code>rio_tiler_pds.sentinel.aws.sentinel1.</code><code>get_bounds</code><code>(</code><code>geom</code><code>)</code> \u2192 (float, float, float, float)","text":""},{"location":"API/sentinel/#rio_tiler_pdssentinelawssentinel1s1l1creader","title":"<code>rio_tiler_pds.sentinel.aws.sentinel1.</code><code>S1L1CReader</code><code>(</code><code>input</code>, <code>tms=&lt;TileMatrixSet title='Google Maps Compatible for the World' id='WebMercatorQuad' crs='http://www.opengis.net/def/crs/EPSG/0/3857&gt;</code>, <code>minzoom=8</code>, <code>maxzoom=14</code>, <code>reader=&lt;class 'rio_tiler.io.rasterio.Reader'&gt;</code>, <code>reader_options=NOTHING</code>, <code>bucket='sentinel-s1-l1c'</code>, <code>prefix_pattern='{product}/{acquisitionYear}/{_month}/{_day}/{beam}/{polarisation}/{scene}'</code><code>)</code>","text":""},{"location":"API/sentinel/#rio_tiler_pdssentinelawssentinel2","title":"rio_tiler_pds.sentinel.aws.sentinel2","text":""},{"location":"API/sentinel/#rio_tiler_pdssentinelawssentinel2s2l1creader","title":"<code>rio_tiler_pds.sentinel.aws.sentinel2.</code><code>S2L1CReader</code><code>(</code><code>input</code>, <code>tms=&lt;TileMatrixSet title='Google Maps Compatible for the World' id='WebMercatorQuad' crs='http://www.opengis.net/def/crs/EPSG/0/3857&gt;</code>, <code>minzoom=8</code>, <code>maxzoom=14</code>, <code>reader=&lt;class 'rio_tiler.io.rasterio.Reader'&gt;</code>, <code>reader_options={'options': {'nodata': 0}}</code>, <code>bucket='sentinel-s2-l1c'</code>, <code>prefix_pattern='tiles/{_utm}/{lat}/{sq}/{acquisitionYear}/{_month}/{_day}/{num}'</code><code>)</code>","text":""},{"location":"API/sentinel/#rio_tiler_pdssentinelawssentinel2s2l2areader","title":"<code>rio_tiler_pds.sentinel.aws.sentinel2.</code><code>S2L2AReader</code><code>(</code><code>input</code>, <code>tms=&lt;TileMatrixSet title='Google Maps Compatible for the World' id='WebMercatorQuad' crs='http://www.opengis.net/def/crs/EPSG/0/3857&gt;</code>, <code>minzoom=8</code>, <code>maxzoom=14</code>, <code>reader=&lt;class 'rio_tiler.io.rasterio.Reader'&gt;</code>, <code>reader_options={'options': {'nodata': 0}}</code>, <code>bucket='sentinel-s2-l2a'</code>, <code>prefix_pattern='tiles/{_utm}/{lat}/{sq}/{acquisitionYear}/{_month}/{_day}/{num}'</code><code>)</code>","text":""},{"location":"API/sentinel/#rio_tiler_pdssentinelawssentinel2s2l2acogreader","title":"<code>rio_tiler_pds.sentinel.aws.sentinel2.</code><code>S2L2ACOGReader</code><code>(</code><code>input</code>, <code>tms=&lt;TileMatrixSet title='Google Maps Compatible for the World' id='WebMercatorQuad' crs='http://www.opengis.net/def/crs/EPSG/0/3857&gt;</code>, <code>minzoom=8</code>, <code>maxzoom=14</code>, <code>reader=&lt;class 'rio_tiler.io.rasterio.Reader'&gt;</code>, <code>reader_options=NOTHING</code>, <code>bucket='sentinel-cogs'</code>, <code>prefix_pattern='sentinel-s2-{_levelLow}-cogs/{_utm}/{lat}/{sq}/{acquisitionYear}/{_month}/S{sensor}{satellite}_{_utm}{lat}{sq}_{acquisitionYear}{acquisitionMonth}{acquisitionDay}_{num}_{processingLevel}'</code><code>)</code>","text":""},{"location":"API/sentinel/#rio_tiler_pdssentinelawssentinel2s2cogreader","title":"<code>rio_tiler_pds.sentinel.aws.sentinel2.</code><code>S2COGReader</code><code>(</code><code>sceneid</code>, <code>**kwargs</code><code>)</code> \u2192 S2L2ACOGReader","text":""},{"location":"API/sentinel/#rio_tiler_pdssentinelawssentinel2s2jp2reader","title":"<code>rio_tiler_pds.sentinel.aws.sentinel2.</code><code>S2JP2Reader</code><code>(</code><code>sceneid</code>, <code>**kwargs</code><code>)</code> \u2192 S2L2AReader or S2L1CReader","text":""},{"location":"API/sentinel/#utils","title":"Utils","text":"function <p>Parse Sentinel 2 scene id.</p> Parameters <ul> <li><code>sceneid</code> (str) \u2014 Sentinel-2 sceneid.</li> </ul> Returns (dict) <p>dictionary with metadata constructed from the sceneid.</p> Raises <ul> <li><code>InvalidSentinelSceneId</code> \u2014 If <code>sceneid</code> doesn't match the regex schema.</li> </ul> Examples <pre><code>&gt;&gt;&gt; s2_sceneid_parser('S2A_L1C_20170729_19UDP_0')\n</code></pre> <pre><code>&gt;&gt;&gt; s2_sceneid_parser('S2A_L2A_20170729_19UDP_0')\n</code></pre> <pre><code>&gt;&gt;&gt; s2_sceneid_parser('S2A_29RKH_20200219_0_L2A')\n</code></pre> <pre><code>&gt;&gt;&gt; s2_sceneid_parse('S2B_MSIL2A_20190730T190919_N0212_R056_T10UEU_20201005T200819')\n</code></pre> function <p>Parse Sentinel 1 scene id.</p> Parameters <ul> <li><code>sceneid</code> (str) \u2014 Sentinel-1 sceneid.</li> </ul> Returns (dict) <p>dictionary with metadata constructed from the sceneid.</p> Raises <ul> <li><code>InvalidSentinelSceneId</code> \u2014 If <code>sceneid</code> doesn't match the regex schema.</li> </ul> Examples <pre><code>&gt;&gt;&gt; s1_sceneid_parser('S1A_IW_GRDH_1SDV_20180716T004042_20180716T004107_022812_02792A_FD5B')\n</code></pre>"},{"location":"API/sentinel/#rio_tiler_pdssentinelutilss2_sceneid_parser","title":"<code>rio_tiler_pds.sentinel.utils.</code><code>s2_sceneid_parser</code><code>(</code><code>sceneid</code><code>)</code>","text":""},{"location":"API/sentinel/#rio_tiler_pdssentinelutilss1_sceneid_parser","title":"<code>rio_tiler_pds.sentinel.utils.</code><code>s1_sceneid_parser</code><code>(</code><code>sceneid</code><code>)</code>","text":""},{"location":"usage/cbers/","title":"CBERS","text":""},{"location":"usage/cbers/#cbers-4-aws","title":"CBERS 4 - AWS","text":"<p>Since data are requester pays, we need to set an environment variable to access the data through <code>rasterio</code>.</p> <pre><code>AWS_REQUEST_PAYER=\"requester\"\n</code></pre> <p>You can either set those variables in your environment or within your code using <code>rasterio.Env()</code>.</p> <pre><code>import rasterio\nfrom rio_tiler_pds.cbers.aws import CBERSReader\n\nCBERS_MUX_SCENE = \"CBERS_4_MUX_20171121_057_094_L2\"\nCBERS_AWFI_SCENE = \"CBERS_4_AWFI_20170420_146_129_L2\"\nCBERS_PAN10M_SCENE = \"CBERS_4_PAN10M_20170427_161_109_L4\"\nCBERS_PAN5M_SCENE = \"CBERS_4_PAN5M_20170425_153_114_L4\"\n\nwith rasterio.Env(AWS_REQUEST_PAYER=\"requester\"):\n    with CBERSReader(\"CBERS_4_MUX_20171121_057_094_L2\") as cbers:\n        print(cbers.bands)\n        &gt;&gt;&gt; ('B5', 'B6', 'B7', 'B8')\n\n        print(cbers.bounds)\n        &gt;&gt;&gt; (90480.0, 526840.0, 236940.0, 666560.0)\n\n        print(cbers.geographic_bounds)\n        &gt;&gt;&gt; (53.3020208330578, 4.756472757234312, 54.628483877373014, 6.025171883475984)\n\n        assert cbers.minzoom == 8\n        assert cbers.maxzoom == 12\n\nwith rasterio.Env(AWS_REQUEST_PAYER=\"requester\"):\n    with CBERSReader(\"CBERS_4_AWFI_20170420_146_129_L2\") as cbers:\n        print(cbers.bands)\n        &gt;&gt;&gt; ('B13', 'B14', 'B15', 'B16')\n\nwith rasterio.Env(AWS_REQUEST_PAYER=\"requester\"):\n    with CBERSReader(\"CBERS_4_PAN10M_20170427_161_109_L4\") as cbers:\n        print(cbers.bands)\n        &gt;&gt;&gt; ('B2', 'B3', 'B4')\n\nwith rasterio.Env(AWS_REQUEST_PAYER=\"requester\"):\n    with CBERSReader(\"CBERS_4_PAN5M_20170425_153_114_L4\") as cbers:\n        print(cbers.bands)\n        &gt;&gt;&gt; ('B1',)\n</code></pre>"},{"location":"usage/landsat-c2/","title":"Landsat Collection 2","text":""},{"location":"usage/landsat-c2/#landsat-collection-2-aws","title":"Landsat Collection 2 - AWS","text":"<p>In late 2020, the U.S. Geological Survey (USGS) \u2014 the organization that publishes Landsat data \u2014 released Landsat Collection 2. This is a major reprocessing of the entire Landsat archive. All Landsat data in Collection 2 is now stored as Cloud-Optimized GeoTIFF (COG)!</p> <p>Landsat Collection 2 can be accessed directly from an AWS bucket. The USGS maintains the <code>usgs-landsat</code> S3 bucket. Keys under the <code>s3://usgs-landsat/collection02/</code> prefix are publicly accessible. Note that this bucket is a requester-pays bucket, which means that the costs of accessing the data accrue to the user, not the host.</p> <p>Since data are requester pays, we need to set an environment variable to access the data through <code>rasterio</code>.</p> <pre><code>AWS_REQUEST_PAYER=\"requester\"\n</code></pre> <p>You can either set those variables in your environment or within your code using <code>rasterio.Env()</code>.</p> <pre><code>import rasterio\nfrom rio_tiler_pds.landsat.aws import LandsatC2Reader\n\nwith rasterio.Env(AWS_REQUEST_PAYER=\"requester\"):\n    with LandsatC2Reader(\"LC08_L2SR_093106_20200207_20201016_02_T2\") as landsat:\n        print(landsat.bands)\n        &gt;&gt;&gt; ('QA_PIXEL', 'QA_RADSAT', 'SR_B1', 'SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B6', 'SR_B7', 'SR_QA_AEROSOL')\n        assert landsat.minzoom == 5\n        assert landsat.maxzoom == 12\n\n        print(landsat.info(bands=\"SR_B1\").json(exclude_none=True))\n        &gt;&gt;&gt; {\n            \"bounds\": [127.54909041630796, -66.70705179185323, 132.96277753047164, -64.4554629843337],\n            \"minzoom\": 5,\n            \"maxzoom\": 12,\n            \"band_metadata\": [[\"SR_B1\", {}]],\n            \"band_descriptions\": [[\"SR_B1\", \"\"]],\n            \"dtype\": \"uint16\",\n            \"nodata_type\": \"Nodata\",\n            \"colorinterp\": [\"gray\"]\n        }\n\n        print(landsat.statistics(bands=\"SR_B1\")[\"SR_B1\"].json())\n        &gt;&gt;&gt; {\n            \"min\": 2487.0,\n            \"max\": 53345.0,\n            \"mean\": 21039.126798561152,\n            \"count\": 8896.0,\n            \"sum\": 187164072.0,\n            \"std\": 16484.450981447077,\n            \"median\": 10978.0,\n            \"majority\": 8233.0,\n            \"minority\": 2487.0,\n            \"unique\": 5932.0,\n            \"histogram\": [\n                [594.0, 4181.0, 603.0, 557.0, 296.0, 207.0, 296.0, 469.0, 615.0, 1078.0],\n                [2487.0, 7572.8, 12658.6, 17744.4, 22830.2, 27916.0, 33001.8, 38087.6, 43173.4, 48259.200000000004, 53345.0]\n            ],\n            \"valid_percent\": 54.3,\n            \"masked_pixels\": 7488.0,\n            \"valid_pixels\": 8896.0,\n            \"percentile_98\": 52178.1,\n            \"percentile_2\": 7367.9\n        }\n\n        tile_z = 8\n        tile_x = 218\n        tile_y = 188\n        img = landsat.tile(tile_x, tile_y, tile_z, bands=(\"SR_B4\", \"SR_B3\", \"SR_B2\"))\n        assert img.data.shape == (3, 256, 256)\n\n        img = landsat.tile(tile_x, tile_y, tile_z, bands=\"SR_B5\")\n        assert img.data.shape == (1, 256, 256)\n\n        img = landsat.tile(\n            tile_x, tile_y, tile_z, expression=\"SR_B5*0.8, SR_B4*1.1, SR_B3*0.8\"\n        )\n        assert img.data.shape == (3, 256, 256)\n\n        img = landsat.preview(\n            bands=(\"SR_B4\", \"SR_B3\", \"SR_B2\"), pan=True, width=256, height=256\n        )\n        assert img.data.shape == (3, 256, 256)\n</code></pre>"},{"location":"usage/modis/","title":"MODIS","text":""},{"location":"usage/modis/#modis-aws","title":"MODIS - AWS","text":""},{"location":"usage/modis/#pds-modis-pds-bucket","title":"PDS (modis-pds bucket)","text":"<p>Products: MCD43A4, MOD09GQ, MYD09GQ, MOD09GA, MYD09GA</p> <pre><code>from rio_tiler_pds.modis.aws import MODISPDSReader\n\nMCD43A4_SCENE = \"MCD43A4.A2017006.h21v11.006.2017018074804\"\nwith MODISPDSReader(MCD43A4_SCENE) as modis:\n    print(modis.bands)\n    &gt;&gt;&gt; (\"B01\", \"B01qa\", \"B02\", \"B02qa\", \"B03\", \"B03qa\", \"B04\", \"B04qa\", \"B05\", \"B05qa\", \"B06\", \"B06qa\", \"B07\", \"B07qa\")\n\n    print(modis.bounds)\n    &gt;&gt;&gt; (31.9253, -30.0, 46.1976, -20.0)\n\n    assert modis.minzoom == 4\n    assert modis.maxzoom == 9\n\nMOD09GA_SCENE = \"MOD09GA.A2017129.h34v07.006.2017137214839\"\nwith MODISPDSReader(MOD09GA_SCENE) as modis:\n    print(modis.bands)\n    &gt;&gt;&gt; (\"B01\", \"B02\", \"B03\", \"B04\", \"B05\", \"B06\", \"B07\", \"geoflags\", \"granule\", \"numobs1km\", \"numobs500m\", \"obscov\", \"obsnum\", \"orbit\", \"qc500m\", \"qscan\", \"range\", \"senaz\", \"senzen\", \"solaz\", \"solzen\", \"state\")\n\nMOD09GQ_SCENE = \"MOD09GQ.A2017120.h29v09.006.2017122031126\"\nwith MODISPDSReader(MOD09GQ_SCENE) as modis:\n    print(modis.bands)\n    &gt;&gt;&gt; (\"B01\", \"B02\", \"granule\", \"numobs\", \"obscov\", \"obsnum\", \"orbit\", \"qc\")\n</code></pre>"},{"location":"usage/modis/#astraea-astraea-opendata-bucket","title":"ASTRAEA (astraea-opendata bucket)","text":"<p>Products: MCD43A4, MOD11A1, MOD13A1, MYD11A1 MYD13A1</p> <pre><code>from rio_tiler_pds.modis.aws import MODISASTRAEAReader\n\nMCD43A4_SCENE = \"MCD43A4.A2017006.h21v11.006.2017018074804\"\nwith MODISASTRAEAReader(MCD43A4_SCENE) as modis:\n    print(modis.bands)\n    &gt;&gt;&gt; (\"B01\", \"B01qa\", \"B02\", \"B02qa\", \"B03\", \"B03qa\", \"B04\", \"B04qa\", \"B05\", \"B05qa\", \"B06\", \"B06qa\", \"B07\", \"B07qa\")\n\n    print(modis.bounds)\n    &gt;&gt;&gt; (31.9253, -30.0, 46.1976, -20.0)\n\n    assert modis.minzoom == 4\n    assert modis.maxzoom == 9\n\nMOD11A1_SCENE = \"MOD11A1.A2020250.h20v11.006.2020251085003\"\nwith MODISASTRAEAReader(MOD11A1_SCENE) as modis:\n    print(modis.bands)\n    &gt;&gt;&gt; (\"B01\", \"B02\", \"B03\", \"B04\", \"B05\", \"B06\", \"B07\", \"B08\", \"B09\", \"B10\", \"B11\", \"B12\")\n\nMOD13A1_SCENE = \"MOD13A1.A2020049.h14v04.006.2020066002045\"\nwith MODISASTRAEAReader(MOD13A1_SCENE) as modis:\n    print(modis.bands)\n    &gt;&gt;&gt; (\"B01\", \"B02\", \"B03\", \"B04\", \"B05\", \"B06\", \"B07\", \"B08\", \"B09\", \"B10\", \"B11\", \"B12\")\n</code></pre>"},{"location":"usage/overview/","title":"Usage","text":"<p>The neighboring documentation pages include more information about each specific dataset, plus an example.</p>"},{"location":"usage/overview/#requester-pays","title":"Requester-Pays","text":"<p>Some data are stored on AWS requester-pays buckets (you are charged for LIST/GET requests and data transfer outside the bucket region). For those datasets you need to set <code>AWS_REQUEST_PAYER=\"requester\"</code> environement variable to tell AWS S3 that you agree with requester-pays principle.</p> <p>You can either set those variables in your environment or within your code using <code>rasterio.Env()</code>.</p> <pre><code>import rasterio\nfrom rio_tiler_pds.sentinel.aws import S2JP2Reader\n\nwith rasterio.Env(AWS_REQUEST_PAYER=\"requester\"):\n    with S2JP2Reader(\"S2A_L1C_20170729_19UDP_0\") as s2:\n        print(s2.preview(bands=\"B01\", width=64, height=64, max_size=None))\n</code></pre>"},{"location":"usage/sentinel/","title":"Sentinel","text":""},{"location":"usage/sentinel/#sentinel-2-aws","title":"Sentinel 2 - AWS","text":""},{"location":"usage/sentinel/#l1c-jpeg2000","title":"L1C - JPEG2000","text":"<p>Warnings</p> <p> JPEG2000 format is not <code>Cloud Optimized</code>, numerous GET requests will be needed to read such format which could result in important cost.</p> <p>bands: <code>B01, B02, B03, B04, B05, B06, B07, B08, B09, B11, B12, B8A</code></p> <pre><code>import rasterio\nfrom rio_tiler_pds.sentinel.aws import S2JP2Reader\n\n# We use __enter__ context manager for the Reader.\n# When creating the instance of `sentinel` the Reader will fetch the sentinel 2 TileInfo.json\n# to retrieve the bounds of the dataset and other metadata available at `sentinel.tileInfo`.\nwith rasterio.Env(AWS_REQUEST_PAYER=\"requester\"):\n    with S2JP2Reader(\"S2A_L1C_20170729_19UDP_0\") as sentinel:\n        # bounds and metadata are derived from the tileInfo.json file stored with the JPEG2000\n        print(type(sentinel))\n        &gt;&gt;&gt; &lt;class 'rio_tiler_pds.sentinel.aws.sentinel2.S2L1CReader'&gt;\n\n        print(type(sentinel.tileInfo))\n        &gt;&gt;&gt; &lt;class 'dict'&gt;\n\n        print(type(sentinel.datageom))\n        &gt;&gt;&gt; &lt;class 'dict'&gt;\n\n        print(sentinel.bands)\n        &gt;&gt;&gt; ('B01',\n        'B02',\n        'B03',\n        'B04',\n        'B05',\n        'B06',\n        'B07',\n        'B08',\n        'B09',\n        'B11',\n        'B12',\n        'B8A')\n\n        print(sentinel.info(bands=\"B01\").json(exclude_none=True))\n        &gt;&gt;&gt; {\n            'bounds': [-69.98971880792764, 47.761069480166995, -68.86723101847079, 48.75300221903151],\n            'minzoom': 8,\n            'maxzoom': 14,\n            'band_metadata': [[\"B01\", {}]],\n            'band_descriptions': [[\"B01\", {}]],\n            'dtype': 'uint16',\n            'nodata_type': 'Nodata',\n            'colorinterp': ['gray']\n        }\n\n        print(sentinel.statistics(bands=\"B8A\")[\"B8A\"].json())\n        &gt;&gt;&gt; {\n            'min': 1.0,\n            'max': 19753.0,\n            'mean': 2873.8173758756675,\n            'count': 653216.0,\n            'sum': 1877223491.0,\n            'std': 2680.2546389126283,\n            'median': 2919.0,\n            'majority': 117.0,\n            'minority': 9913.0,\n            'unique': 11767.0,\n            'histogram': [\n                [281576.0, 154185.0, 130600.0, 49758.0, 30001.0, 6851.0, 242.0, 1.0, 1.0, 1.0],\n                [1.0, 1976.2, 3951.4, 5926.6, 7901.8, 9877.0, 11852.2, 13827.4, 15802.6, 17777.8, 19753.0]\n            ],\n            'valid_percent': 62.3,\n            'masked_pixels': 395360.0,\n            'valid_pixels': 653216.0,\n            'percentile_98': 9320.699999999953,\n            'percentile_2': 106.0\n        }\n\n        img = sentinel.tile(77, 89, 8, bands=\"B01\")\n        assert img.data.shape == (1, 256, 256)\n\n        print(sentinel.point(-69.41, 48.25, bands=(\"B01\", \"B02\")))\n        &gt;&gt; PointData(\n            array=masked_array(data=[1201, 843], mask=[False, False], fill_value=999999, dtype=uint16),\n            band_names=['B01', 'B02'],\n            coordinates=(-69.41, 48.25),\n            crs=CRS.from_epsg(4326),\n            assets=[\n                's3://sentinel-s2-l1c/tiles/19/U/DP/2017/7/29/0/B01.jp2',\n                's3://sentinel-s2-l1c/tiles/19/U/DP/2017/7/29/0/B02.jp2'\n            ],\n            metadata={}\n        )\n\n        # Working with Expression\n        img = sentinel.tile(77, 89, 8, expression=\"B01/B02\")\n        assert igm.data.shape == (1, 256, 256)\n\n        print(sentinel.point(-69.41, 48.25, expression=\"B01/B02\"))\n        &gt;&gt; PointData(\n            array=masked_array(data=[1.424673784104389], mask=[False], fill_value=999999, dtype=float32),\n            band_names=['B01/B02'],\n            coordinates=(-69.41, 48.25),\n            crs=CRS.from_epsg(4326),\n            assets=[\n                's3://sentinel-s2-l1c/tiles/19/U/DP/2017/7/29/0/B01.jp2',\n                's3://sentinel-s2-l1c/tiles/19/U/DP/2017/7/29/0/B02.jp2'\n            ],\n            metadata={}\n        )\n</code></pre>"},{"location":"usage/sentinel/#l2a-jpeg2000","title":"L2A - JPEG2000","text":"<p>Warnings</p> <p> JPEG2000 format is not <code>Cloud Optimized</code>, numerous GET requests will be needed to read such format which could result in important cost.</p> <p>bands: <code>B01, B02, B03, B04, B05, B06, B07, B08, B09, B11, B12, B8A</code></p> <p>Note: <code>AOT, SCL, WVP</code> bands are not supported.</p> <pre><code>import rasterio\nfrom rio_tiler_pds.sentinel.aws import S2JP2Reader\n\nwith rasterio.Env(AWS_REQUEST_PAYER=\"requester\"):\n    with S2JP2Reader(\"S2A_L2A_20170729_19UDP_0\") as sentinel:\n        # bounds and metadata are derived from the tileInfo.json file stored with the JPEG2000\n        print(type(sentinel))\n        &gt;&gt;&gt; &lt;class 'rio_tiler_pds.sentinel.aws.sentinel2.S2L2AReader'&gt;\n\n        print(type(sentinel.tileInfo))\n        &gt;&gt;&gt; dict\n\n        print(type(sentinel.datageom))\n        &gt;&gt;&gt; dict\n\n        print(sentinel.info(bands=\"B01\").dict(exclude_none=True))\n        &gt;&gt;&gt; {\n            \"bounds\": [-69.98831359398795, 47.7610811323474, -68.86723101847079, 48.75300225264652],\n            \"minzoom\": 8,\n            \"maxzoom\": 14,\n            \"band_metadata\": [[\"B01\", {}]],\n            \"band_descriptions\": [[\"B01\", \"\"]],\n            \"dtype\": \"uint16\",\n            \"nodata_type\": \"Nodata\",\n            \"colorinterp\": [\"gray\"]\n        }\n</code></pre>"},{"location":"usage/sentinel/#cog-only-l2a-available-for-now","title":"COG (Only L2A available for now)","text":"<p>bands: <code>B01, B02, B03, B04, B05, B06, B07, B08, B09, B11, B12, B8A</code></p> <p>Note: <code>AOT, SCL, WVP</code> STAC assets are not supported.</p> <p>Notes:</p> <ul> <li>the <code>B10</code> band is the cirrus band and is only supported for L1C, not L2A.</li> <li>the <code>sentinel-2-l2a-cogs</code> is a public dataset, no AWS credential should be needed.</li> </ul> <pre><code>from rio_tiler_pds.sentinel.aws import S2COGReader\n\nwith S2COGReader(\"S2A_29RKH_20200219_0_L2A\") as sentinel:\n    print(type(sentinel))\n    &gt;&gt;&gt; &lt;class 'rio_tiler_pds.sentinel.aws.sentinel2.S2L2ACOGReader'&gt;\n\n    print(sentinel.bands)\n    &gt;&gt;&gt; ('B01', 'B02', 'B03', 'B04', 'B05', 'B06', 'B07', 'B08', 'B09', 'B11', 'B12', 'B8A')\n\n    # bounds and metadata are derived from the STAC item stored with the COG\n    print(type(sentinel.stac_item))\n    &gt;&gt;&gt; dict\n</code></pre>"},{"location":"usage/sentinel/#sentinel-1-aws","title":"Sentinel 1 - AWS","text":"<pre><code>import rasterio\nfrom rio_tiler_pds.sentinel.aws import S1L1CReader\n\nwith rasterio.Env(AWS_REQUEST_PAYER=\"requester\"):\n    with S1L1CReader(\"S1A_IW_GRDH_1SDV_20180716T004042_20180716T004107_022812_02792A_FD5B\") as sentinel:\n        print(sentinel.bands)\n        &gt; ('vv', 'vh')\n\n        print(sentine.bounds)\n        &gt; (75.605247, 9.225784, 78.203903, 11.190425)\n\n        print(type(sentinel.productInfo))\n        &gt; dict\n\n        print(sentinel._get_band_url(\"vv\"))\n        &gt; 's3://sentinel-s1-l1c/GRD/2018/7/16/IW/DV/S1A_IW_GRDH_1SDV_20180716T004042_20180716T004107_022812_02792A_FD5B/measurement/iw-vv.tiff'\n</code></pre> <p>Important</p> <p>For most dataset hosted on AWS you will need to have AWS credentials available in your environment.</p>"}]}